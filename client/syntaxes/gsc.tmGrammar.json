{
    "scopeName": "source.gsc",
    "comment": "GSC grammar: based on https://gist.github.com/edfuh/2041042",
    "fileTypes": [
        "gsc"
    ],
    "foldingStartMarker": "^.*\bfunction\\s*(\\w+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
    "foldingStopMarker": "^\\s*\\}",
    "patterns": [
        { "include": "#function" },
        { "include": "#class" },
        { "include": "#block-comment" },
        { "include": "#expression" },
        { "include": "#control" },
        { "include": "#operator" },
        { "include": "#line-comment" },
        {
            "name": "comment.block.documentation.gsc",
            "begin": "/@",
            "end": "@/",
            "patterns": [
                { "include": "#doc-data-types" },
                { "include": "#doc-data-modifiers" },
                { "include" : "#doc-comment-descriptor" },
                { "include": "#doc-comment-gscode-directive" }
            ]
        },
        {
            "name": "meta.preprocessor.file-directives.gsc",
            "match": "(#(?:using|insert))\\s([^ ;]*)(;)?",
            "captures": {
                "1": { "name": "keyword.control.directive.using.gsc" },
                "2": { "name": "string.quoted.other.blank.using.gsc" },
                "3": { "name": "keyword.control.directive.end.gsc" }
            }
        },
        {
            "name": "meta.preprocessor.namespace.gsc",
            "match": "(#(?:namespace))\\s([^ ]*)(;)",
            "captures": {
                "1": { "name": "keyword.control.directive.using.gsc" },
                "2": { "name": "entity.name.namespace.gsc" },
                "3": { "name": "keyword.control.directive.end.gsc" }
            }
        },
        {
            "name": "meta.preprocessor.asset-directives.gsc",
            "match": "(#(?:using_animtree|precache)\\()(.*)(\\);)",
            "captures": {
                "1": { "name": "keyword.control.directive.asset.start.gsc" },
                "2": { 
                    "name": "keyword.control.directive.asset.parameters.gsc",
                    "patterns": [
                        {
                            "include": "#double-quote-string"
                        }
                    ]
                },
                "3": { "name": "keyword.control.directive.asset.end.gsc" }
            }
        },
        {
            "name": "meta.preprocessor.macro.gsc",
            "begin": "(#define)\\s([^\\s\\(]+)(?:(\\()(.+?)(\\)))?\\s+",
            "end": "(?<=\\n)(?<!\\\\\\n)",
            "beginCaptures": {
                "1": { "name": "keyword.control.directive.define.gsc" },
                "2": { "name": "entity.name.function.preprocessor.gsc" },
                "3": { "name": "punctuation.definition.parameters.begin.preprocessor.gsc" },
                "4": { 
                    "name": "variable.parameter.preprocessor.gsc",
                    "patterns": [
                        {
                            "comment": "Not sure if this even works in GSC",
                            "include": "#function-parameter-defaults"
                        },
                        {
                            "include": "#expression"
                        },
                        {
                            "name": "meta.preprocessor.separator.parameters.gsc",
                            "match": ","
                        }
                    ]
                },
                "5": { "name": "punctuation.definition.parameters.end.preprocessor.gsc" }
            },
            "patterns": [
                { "include": "#line-continuation-character" },
                { "include": "#block-comment" },
                { "include": "#expression" },
                { "include": "#control" },
                { "include": "#function-call" },
                { "include": "#function" },
                { "include": "#class" },
                { "include": "#line-comment" }
            ]
        },
        {
            "name": "meta.preprocessor.conditional.gsc",
            "match": "(#(?:if|elif|else|endif))",
            "captures": {
                "1": { "name": "keyword.control.directive.conditional.gsc" }
            }
        },
        { "include": "#function-call" }
    ],
    "repository": {
        "block-comment": {
            "name": "comment.block.comment.gsc",
            "begin": "\\/\\*",
            "end": "\\*\\/"
        },
        "dev-block": {
            "name": "keyword.control.directive.dev-block.gsc",
            "match": "(?:\\/\\#|#\\/)"
        },
        "double-quote-string": {	
            "name": "string.quoted.double.gsc",
			"begin": "\"",
            "end": "\"",
			"beginCaptures": { "0": { "name": "punctuation.definition.string.begin.gsc" }},
            "endCaptures": { "0": { "name": "punctuation.definition.string.end.gsc" }},
            "patterns": [
                { "include": "#escape" }
            ]
		},
        "function-parameter-defaults": {
            "name": "meta.parameters.default.gsc",
            "match": "(([[:alnum:]]\\w*)\\s*(=)\\s*([^,]*)(,|\\)))",
            "captures": {
                "3": {
                    "name": "keyword.operator.parameter-default.gsc"
                },
                "4": {
                    "patterns": [
                        { "include": "#expression" }
                    ]
                },
                "5": {
                    "name": "keyword.operator.parameter-comma.gsc"
                }
            }
        },
        "function-vararg": {
            "name": "keyword.operator.vararg.gsc",
            "match": "\\.\\.\\."
        },
        "language-reserved-variables": {
            "name": "variable.language.gsc",
            "match": "\\b(self|level|game|world|vararg)\\b"
        },
		"storage-types": {
			"name": "storage.type.gsc",
			"match": "\\b(var|const)\\b"
		},
        "boolean-true": {
            "name": "constant.language.boolean.true.gsc",
            "match": "\\btrue\\b"
        },
        "boolean-false": {
            "name": "constant.language.boolean.false.gsc",
            "match": "\\bfalse\\b"
        },
        "undefined": {
            "name": "constant.language.undefined.gsc",
            "match": "\\bundefined\\b"
        },
        "expression-keywords": {
            "patterns": [
                { "include": "#undefined" },
                { "include": "#boolean-true" },
                { "include": "#boolean-false" },
                { "include": "#language-reserved-variables" },
				{ "include": "#storage-types" }
            ]
        },
        "number": {	
            "name": "constant.numeric.gsc",
			"match": "\\b((0(x|X)[0-9a-fA-F]+)|(\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?))\\b"
		},
        "expression": {
            "patterns": [
                { "include": "#block-comment" },
                { "include": "#dev-block" },
                { "include": "#double-quote-string" },
                { "include": "#number" },
                { "include": "#function-pointer" },
                { "include": "#expression-keywords" },
                { "include": "#operator" },
                { "include": "#function-call" },
                { "include": "#control" }
            ]
        },
        "control": {
            "name": "keyword.control.gsc",
            "comment": "Reserved control keywords in GSC/CSC",
            "match": "(?i)\\b(class|return|wait|thread|classes|anim|if|else|do|while|for|foreach|in|new|waittill|waittillmatch|waittillframeend|switch|case|default|break|continue|notify|endon|waitrealtime|profilestart|profilestop|isdefined)\\b"
        },
        "escape": {
            "name": "constant.character.escape",
            "match": "\\\\(r|n|t)"
        },
        "namespace-call": {	
            "name": "meta.namespace-call.gsc",
			"comment": "match function calls like: scene::play('example');",
			"match": "\\b((?:[[:alpha:]]|_)\\w+)(::)((?:[[:alnum:]]|_)\\w+)\\b",
			"captures": {
                "1": { "name": "entity.name.scope-resolution.gsc" },
                "3": { 
                    "name": "entity.name.function.gsc",
                    "patterns": [
                        {
                            "include": "#control"
                        }
                    ]
                }
            },
            "patterns": [
                { "include": "#function-call" },
                { "include": "#block-comment"}
            ]
        },
        "other-function": {	
            "name": "meta.function-call.gsc",
			"comment": "match function calls like: burger('example');",
            "begin": "((?:[[:alpha:]]|_)\\w+)\\s*(\\()",
            "end": "\\)",
			"beginCaptures": {
                "1": { 
                    "name": "entity.name.function.gsc",
                    "patterns": [
                        {
                            "include": "#control"
                        }
                    ]
                },
                "2": { "name": "punctuation.section.parens.begin.gsc" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.section.parens.end.gsc" }
            },
            "patterns": [
                { "include": "#function-call" },
                { "include": "#block-comment"},
                { "include": "#expression"}
            ]
        },
        "function-pointer": {
            "name": "entity.name.function.pointer.gsc",
            "match": "(\\&)(?:((?:[[:alpha:]]|_)\\w+)(::))?(?:[[:alnum:]]|_)+?\\b",
            "captures": {
				"1": { "name": "keyword.operator.function-pointer.gsc" },
                "2": { "name": "entity.name.scope-resolution.gsc" }
            }
        },
        "function-call": {
            "patterns": [
                { "include": "#namespace-call" },
                { "include": "#other-function" }
            ]
        },
        "line-continuation-character": {
            "match": "\\\\\\n",
            "name": "constant.character.escape.line-continuation.gsc"
        },
        "function": {	
            "name": "meta.function.gsc",
			"comment": "match regular function like: function myFunc(arg) { É }",
			"begin": "\\b(function)(\\s[a-zA-Z_$]\\w*)?\\s+([a-zA-Z_$]\\w*)?\\s*(\\()",
			"end": "(?!\\G)(?<=\\))",
			"beginCaptures": {
                "1": { "name": "storage.type.function.gsc" },
                "2": {
                    "patterns": [
                        {
                            "name": "storage.modifier.function.gsc",
                            "match": "\\b(private|autoexec)\\b"
                        }
                    ]
                },
                "3": { "name": "entity.name.function.gsc" },
                "4": { "name": "punctuation.definition.parameters.begin.gsc" }
            },
			"endCaptures": {
				"1": { "name": "punctuation.definition.parameters.end.gsc" }
			},
			"patterns": [
				{
					"include": "#function-parameter-defaults"
				},
				{
					"include": "#function-vararg"
				},
				{
					"name": "keyword.operator.parameter-comma.gsc",
					"match": ","
				}
			]
        },
        "line-comment": 
        {
            "name": "comment.line.double-slash.gsc",
            "begin": "//",
            "end": "(?<=\\n)(?<!\\\\\\n)",
            "patterns": [
                { "include": "#line-continuation-character" }
            ]
        },
        "class": {
            "patterns": [
                { "include": "#class-decl" },
                { "include": "#class-structor" }
            ]
        },
        "class-decl": {	
            "name": "meta.class.gsc",
			"comment": "match classes like: class Ham, class Cheddar : Cheese { É }",
			"match": "\\b(class)\\s([a-zA-Z_$]\\w*)(\\s:\\s+([a-zA-Z_$]\\w*))?",
			"captures": {
                "1": { "name": "storage.type.class.gsc" },
                "2": { "name": "entity.name.class.gsc" },
                "4": { "name": "entity.other.inherited-class.gsc" }
            }
        },
        "class-structor": {	
            "name": "meta.class.structor.gsc",
			"comment": "con/de structor()",
			"match": "\\b(constructor|destructor)\\s*(\\()(.*?)(\\))",
			"captures": {
                "1": { "name": "storage.type.function.gsc" },
                "2": { "name": "punctuation.definition.parameters.begin.gsc" },
                "3": { 
                    "name": "variable.parameter.function.gsc",
                    "patterns": [
                        {
                            "include": "#function-parameter-defaults"
                        },
                        {
                            "include": "#expression"
                        },
                        {
                            "include": "#function-vararg"
                        },
                        {
                            "name": "keyword.operator.parameter-comma.gsc",
                            "match": ","
                        }
                    ]
                },
                "4": { "name": "punctuation.definition.parameters.end.gsc" }
            }
        },
        "operator": {
            "name": "keyword.operator.gsc",
            "comment": "Reserved operators in GSC/CSC",
            "match": "(\\|\\||\\&\\&|\\||\\&|\\^|\\=\\=|\\=\\=\\=|\\!\\=|\\!\\=\\=|\\<|\\>|\\<\\=|\\>\\=|\\<\\<|\\>\\>|\\+|\\-|\\*|\\%|\\!|\\~|\\=|\\-\\>|\\+\\+|\\-\\-|\\|\\=|\\^\\=|\\&\\=|\\<\\<\\=|\\>\\>\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=)"
        },
        "doc-data-types": {
            "name": "entity.name.type.documentation.gsc",
            "comment": "GSC/CSC data types to show in documentation",
            "match": "(void|bool|int|float|vec3|string|entity|struct|object|array)"
        },
        "doc-data-modifiers": {
            "name": "storage.modifier.documentation.gsc",
            "comment": "GSC/CSC modifiers to show in documentation",
            "match": "(const|\\?|undefined)"
        },
        "doc-comment-descriptor": {
            "name": "comment.block.documentation.descriptor.gsc",
            "comment": "GSC/CSC function description",
            "match": "\"(.*?): (.*)\"",
            "captures": {
                "1": { "name": "entity.name.tag.documentation.gsc" },
                "2": {
                    "patterns": [
                        { "include": "#doc-comment-function-name" },
                        { "include": "#doc-comment-argument" }
                    ]
                }
            }
        },
        "doc-comment-function-name": {
            "name": "comment.block.documentation.argument.gsc",
            "comment": "GSC/CSC doc comment function declaration",
            "match": ".*?(\\()(.*?)(\\))",
            "captures": {
                "1": { "name": "punctuation.definition.parameters.begin.documentation.gsc" },
                "2": { 
                    "patterns": [
                        { "include": "#doc-comment-argument" }
                    ]
                },
                "3": { "name": "punctuation.definition.parameters.end.documentation.gsc" }
            }
        },
        "doc-comment-argument": {
            "match": "(<|\\[)(.*?)(>|\\])",
            "captures": {
                "1": { "name": "punctuation.definition.tag.documentation.gsc" },
                "2": { "name": "variable.parameter.documentation.gsc" },
                "3": { "name": "punctuation.definition.tag.documentation.gsc" }
            }
        },
        "doc-comment-gscode-directive": {
            "match": "(gscode) (\\w*) (\\w*)?",
            "captures": {
                "1": { "name": "support.type.gscode-directive.gsc" },
                "2": { "name": "support.function.gscode-directive.gsc" },
                "3": {
                    "patterns": [
                        { "include": "#doc-comment-gscode-option" }
                    ]
                }
            }
        },
        "doc-comment-gscode-option": {
            "match": "types|nameInference",
            "name": "support.variable.gscode-directive.gsc"
        }
    }
}