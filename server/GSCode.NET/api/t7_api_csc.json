{
	"languageId": "csc",
	"gameId": "t7",
	"revision": 2,
	"revisedOn": "2023-04-03T16:05:43.617Z",
	"api": [
	  {
		"name": "AddAwarenessIndicator",
		"description": "Draw an awareness indicator",
		"example": "AddAwarenessIndicator(ai.origin, \"hit_material_green\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "pos",
				"description": "awareness location",
				"mandatory": true
			  },
			  {
				"name": "material",
				"description": "awareness material",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddFriendlyScrambler",
		"description": "Adds new friendly scrambler to the compass",
		"example": "player AddFriendlyScrambler( scrambler.origin[0], scrambler.origin[1], scrambler.handle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "x",
				"description": "X coord (float)",
				"mandatory": true
			  },
			  {
				"name": "y",
				"description": "Y coord (float)",
				"mandatory": true
			  },
			  {
				"name": "handle",
				"description": "will be used to remove the scrambler (integer)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddSensorGrenadeArea",
		"description": "Adds new sensor grenade radius indicator to the compass",
		"example": "player AddSensorGrenadeArea( sensor.origin, sensor.handle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "position",
				"description": "origin",
				"mandatory": true
			  },
			  {
				"name": "handle",
				"description": "will be used to remove the sensor",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddZombieBoxWeapon",
		"description": "Adds a zombie box weapon",
		"example": "AddZombieBoxWeapon( weapon, weapon.worldModel, weapon.isDualWield )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weapon",
				"description": "The weapon to add",
				"mandatory": true
			  },
			  {
				"name": "weaponModelName",
				"description": "The model name of the weapon",
				"mandatory": true
			  },
			  {
				"name": "isDualWield",
				"description": "True if the weapon is dual wield, false otherwise",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AimingAtFriendly",
		"description": "Returns true if localclient 0 has crosshairs on friendly",
		"example": "isFriend = AimingAtFriendly()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "AllocateSoundRandoms",
		"description": "Allocate a pool of random sounds",
		"example": "AllocateSoundRandoms(randoms.size - nScriptThreadedRandoms)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "num randoms",
				"description": "number of randoms",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AllowActionSlotInput",
		"description": "always allow action slot input",
		"example": "AllowActionSlotInput(localclientnum)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you to enable the action slots",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AllowRoundAnimation",
		"description": "sets the allow round animation flag to enabled or disabled",
		"example": "AllowRoundAnimation( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "flag",
				"description": "1 to allow, 0 to disallow",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AllowScoreboard",
		"description": "allow scoreboard or not",
		"example": "AllowScoreboard(localclientnum)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you to enable the action slots",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AreMeshesStreamed",
		"description": "Returns true if this entity's meshes are streamed in",
		"example": "thing areMeshesStreamed()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "AreTexturesStreamed",
		"description": "Returns true if this entity's textures are streamed in",
		"example": "thing areTexturesStreamed()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "AttachWeapon",
		"description": "Attaches a weapon to the entity.",
		"example": "self AttachWeapon( weapon )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "weapon",
				"description": "The weapon to attach.",
				"mandatory": true
			  },
			  {
				"name": "renderoptions",
				"description": "The render options for the weapon",
				"mandatory": false
			  },
			  {
				"name": "acvi",
				"description": "The attachment cosmetic variations",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "BlurAndTint_FX",
		"description": "Plays RadioActive/Fire FX",
		"example": "entity BlurAndTint_FX(0, true, 1)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  },
			  {},
			  {
				"name": "level",
				"description": "0 - 1",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "CameraForceDisableScriptCam",
		"description": "Disable the script cam from client script.",
		"example": "player CameraForceDisableScriptCam( true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "CameraSetLensId",
		"description": null,
		"example": "entity CameraSetLensId(0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "id",
				"description": "int",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CameraSetUpdateCallback",
		"description": "Set the function that will get called during the camera update",
		"example": "player CameraSetUpdateCallback( &function )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "function",
				"description": "a function pointer to a function that will get called during the camera update, the function should set the scr cam",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "CleanupSpawnedDynEnts",
		"description": "Removed all dyn ents that were dynamically spawned (gib pieces, destructible parts, etc)",
		"example": "CleanupSpawnedDynEnts()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearAlternateAimParams",
		"description": "Forces the local player to use default values for aim assist.  Only works in zombie/campaign mode. Can only be called on players",
		"example": "self ClearAlternateAimParams()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearLastUpdatedCollectibles",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearMaterialOverride",
		"description": "Clears the material override",
		"example": "self ClearMaterialOverride()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearNearestEnemyScrambler",
		"description": "clears closest enemy scrambler from the compass",
		"example": "player ClearNearestEnemyScrambler( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearStepTriggerSound",
		"description": "Clears the sound triggered by steps",
		"example": "trigPlayer ClearStepTriggerSound()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ClearStreamerRequest",
		"description": "Clear a hint from a request slot (0-7)",
		"example": "clearStreamerRequest(0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "slot",
				"description": "Request slot",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "codcaster_keyline_enable",
		"description": "Enable or disable the CODCaster Keyline effect",
		"example": "entity CODCasterKeyline_Enable( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "type",
				"description": "0-disable 1-enable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CreateSoundRandom",
		"description": "Create sound random at the position",
		"example": "CreateSoundRandom(randSound.origin, randSound.script_sound, randSound.script_wait_min, randSound.script_wait_max)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "position",
				"description": "The position",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "The sound name",
				"mandatory": true
			  },
			  {
				"name": "min wait",
				"description": "The minimum wait time",
				"mandatory": true
			  },
			  {
				"name": "max wait",
				"description": "The maximum wait time",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DemoIsAnyFreeMoveCamera",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DemoIsDollyCamera",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DemoIsEditCamera",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DemoIsMovieCamera",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DisableOnRadar",
		"description": "Sets the icon to be shown on the minimap",
		"example": "actor DisableOnRadar()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DisableSpeedBlur",
		"description": "REmoves a speed blur on on the screen",
		"example": "DisableSpeedBlur( <localClientNum> )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DisableVehicleSounds",
		"description": "Disables all sounds from a vehicle",
		"example": "self DisableVehicleSounds()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "DragonStrike_Enable",
		"description": "Enable or disable the DragonStrike effect",
		"example": "entity DragonStrike_enable( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "type",
				"description": "0-disable 1-enable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DragonStrike_SetColorRadiusSpinPulse",
		"description": "Set Dragon Strike Cicle position",
		"example": "entity DragonStrike_SetColorRadiusSpinPulse( 1.0, 0.5, 0.25, 100.0, 0.5, 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "DragonStrike_SetPosition",
		"description": "Set Dragon Strike Cicle position",
		"example": "entity DragonStrike_SetPosition( vec3 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "EnableOnRadar",
		"description": "Sets the icon to be shown on the minimap",
		"example": "actor EnableOnRadar()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "EnableSpeedBlur",
		"description": "Sets a speed blur on on the screen with parameters",
		"example": "EnableSpeedBlur( localClientNum, .02, .5, .75, true, 300.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  },
			  {
				"name": "amount",
				"description": "Blur Amount ( 0.0 - 1.0 )",
				"mandatory": true
			  },
			  {
				"name": "inner radius",
				"description": "The size of the inner radius ( 0.0 - 1.0 )",
				"mandatory": true
			  },
			  {
				"name": "inner outerradius",
				"description": "The size of the inner radius ( 0.0 - 1.0 )",
				"mandatory": true
			  },
			  {
				"name": "velocityShouldScale",
				"description": "false don't scale with velocity, true scale",
				"mandatory": false
			  },
			  {
				"name": "velocityScale",
				"description": "Specify the velocity when the scale is 1.0",
				"mandatory": false
			  },
			  {
				"name": "blurInTime",
				"description": "Specify the time it takes to complete a blur in",
				"mandatory": false
			  },
			  {
				"name": "blurOutTime",
				"description": "Specify the time it takes to complete a blur out",
				"mandatory": false
			  },
			  {
				"name": "shouldOffset",
				"description": "Specify whether the blur should change as you move left/right or up/down",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "EnableVehicleSounds",
		"description": "Enables all sounds from a vehicle",
		"example": "self EnableVehicleSounds()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "evSetRanges",
		"description": "Sets the visual range for EV mode",
		"example": "evSetRanges( localclientnum, geometryRange, targetRange )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  },
			  {
				"name": "geometryRange",
				"description": "geometry draw distance.",
				"mandatory": true
			  },
			  {
				"name": "targetRange",
				"description": "target object draw distance.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FindDRFilter",
		"description": "optimized code replacement for find_dr_filter",
		"example": "object FindDRFilter( filterset )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "object",
				"description": "entity to check for flags on",
				"mandatory": true
			  },
			  {
				"name": "filterset",
				"description": "filterset to use",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FlushSubtitles",
		"description": "Flush and clear any current subtitles on the screen for this specific client",
		"example": "FlushSubtitles(0) ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum to flush the subtitles for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FootstepDoEverything",
		"description": "Set the footsteps to play sound and play the footstep fx",
		"example": "FootstepDoEverything()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "FootstepDoFootstepFX",
		"description": "Set the footsteps to play the effect",
		"example": "FootstepDoFootstepFX()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "FootstepDoNothing",
		"description": "Set the footsteps to do nothing. Not to play sound or play any fx",
		"example": "FootstepDoNothing()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "FootstepDoSound",
		"description": "Set the footsteps to play sound",
		"example": "FootstepDoSound()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ForceAmbientRoom",
		"description": "Force play an ambient sound",
		"example": "ForceAmbientRoom( \"sndHealth_LowHealth\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "The sound name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceDelete",
		"description": "Forces Removal of a  entity. Does not wait till next snapshot to remove it.  Will cause crash if called on animated entity",
		"example": "thing forcedelete()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ForceGameModeMappings",
		"description": "Forces the users controller mappings for a specific game mode (or resets to user defaults)",
		"example": "ForceGameModeMappings( localClientNum, \"default\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number to play the animation on",
				"mandatory": true
			  },
			  {
				"name": "modeName",
				"description": "Name of the mode to switch to or \"default\" for user defaults",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceStreamBundle",
		"description": "Force the assets in a script bundle to stream in",
		"example": "ForceStreamBundle( \"cin_ram_02_03_ai\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "Name of the script bundle to stream",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceStreamMaterial",
		"description": "Forces the streamer to load texture LODs for a material even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
		"example": "areAllForcedLodsLoaded = ForceStreamMaterial( material, mipsToNotForce )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "material",
				"description": "Material to force stream",
				"mandatory": true
			  },
			  {
				"name": "textureLods",
				"description": "Texture LODs to not force",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceStreamWeaponRenderOptions",
		"description": "Forces all materials for the combination of weapon and render options to stream in",
		"example": "ForceStreamWeaponRenderOptions( localClientNum, weapon, weaponOptions )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "weapon",
				"description": "Weapon to look up the materials to stream with",
				"mandatory": true
			  },
			  {
				"name": "weaponOptions",
				"description": "Render Options to look up the materials to stream with",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceStreamWeapons",
		"description": "Forces all weapon materials to stream in",
		"example": "forceStreamWeapons()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ForceStreamXModel",
		"description": "Forces the streamer to load model and texture LODs for a model even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
		"example": "areAllForcedLodsLoaded = CScr_ForceStreamXModel( model, meshLodsToNotForce, textureLodsToNotForce, alsoStreamLowerLods=true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "model",
				"description": "The model to force stream",
				"mandatory": true
			  },
			  {
				"name": "meshLodsToForce",
				"description": "The mesh LODs to force ( Default is 0 )",
				"mandatory": false
			  },
			  {
				"name": "textureLodsToForce",
				"description": "The texture LODs to force ( Default is 0 )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForceTModeVisible",
		"description": "Forces an entity to be visible as if a player was seeing it via tmode",
		"example": "ForceTModeVisible( aiGuy, true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "entity",
				"description": "The entity the value is being set for",
				"mandatory": true
			  },
			  {
				"name": "visible",
				"description": "If the entity should be considered always visible or not (default true)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GadgetPulseGetOwner",
		"description": "Returns the owner of the vision pulse you an entity is pulsed by if it exists",
		"example": "entity GadgetPulseGetOwner(<localclientnum>)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GadgetPulseResetReveal",
		"description": "Resets the reveal on an entity for this player",
		"example": "entity GadgetPulseResetReveal()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GadgetPulseRevealed",
		"description": "Tests whether an enemy is currently revealed for this player",
		"example": "reveal = entity GadgetPulseRevealed()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GadgetSetInfrared",
		"description": "Enables or disables infrared for the gadget",
		"example": "GadgetSetInfrared( localclientnum, newVal )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  },
			  {
				"name": "bool",
				"description": "0 disables infrared, 1 enables it.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetActiveLocalClients",
		"description": "Get the number of active local clients",
		"example": "active_clients = GetActiveLocalClients()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetAIFxName",
		"description": "Returns a FX name corresponding to the AI's aiFxBundle key/value pair.",
		"example": "fxName = self GetAIFxName( localClientNum, surfaceTable )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to check",
				"mandatory": true
			  },
			  {
				"name": "aiFxBundleKey",
				"description": "Script bundle key defined within the AI's aiFxTable.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAllCharacterBodies",
		"description": "Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",
		"example": "heroIndices = GetAllCharacterBodies()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "sessionMode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAllCharacterHeads",
		"description": "Returns all character indices, even disabled ones, for the current session mode (or specified session mode)",
		"example": "heroIndices = GetAllCharacterHeads()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAnimCurrFrameCount",
		"description": "Get current frame for the given animation when its running.",
		"example": "CurrFrameNum = GetAnimCurrFrameCount(climbAnim)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "animation",
				"description": "a primitive animation: calling this function on a non-primitive animation will fail",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAnimForCharacter",
		"description": "Returns the name of the animation to use for the character pose in the frontend",
		"example": "frontendVignetteAnim = GetAnimForCharacter( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAnimStateCategory",
		"description": "Returns the current anim state category for an Actor.",
		"example": "category = GetAnimStateCategory( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetBodyAccentColorCountForHero",
		"description": "Returns the number of accents for the specified body model of a specific hero",
		"example": "modelName = GetBodyAccentColorCountForHero( localClientNum, 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "bodyIndex",
				"description": "The index of the body for the specific hero",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetBodyRenderOptionsPacked",
		"description": "Gets the packed value of body render options (body type, style, colors)",
		"example": "gibEntity GetBodyRenderOptionsPacked()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetCamAngles",
		"description": "Returns the camera view angles",
		"example": "player GetCamPos()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetCamAnglesByLocalClientNum",
		"description": "Get the camera angles of the local client given",
		"example": "cam_angles = GetCamAnglesByLocalClientNum( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCamPos",
		"description": "Returns the camera position",
		"example": "player GetCamPos()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetCamPosByLocalClientNum",
		"description": "Get the camera position of the local client given",
		"example": "cam_origin = GetCamPosByLocalClientNum( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterAssetName",
		"description": "Returns the asset name for a character for the current session mode",
		"example": "heroName = GetCharacterAssetName( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterBodyModelColorCount",
		"description": "Returns the body model count for a character for the current session mode",
		"example": "heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "bodyStyleIndex",
				"description": "The index of the body style in the character",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterBodyModelCount",
		"description": "Returns the body model count for a character for the current session mode",
		"example": "heroBodyModelCount = GetCharacterBodyModelCount( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterBodyStyleIndex",
		"description": "Returns the index of the body style designated by the given display name",
		"example": "bodyStyleIndex = GetCharacterBodyStyleIndex( true, \"Technomancer\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "gender",
				"description": "Whether or not to use the male bodytype",
				"mandatory": true
			  },
			  {
				"name": "bodyStyleDisplayName",
				"description": "The name of the body style",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterCustomizationForXUID",
		"description": null,
		"example": "GetCharacterCustomizationForXUID( <xuid>)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "xuid",
				"description": "The xuid of the player to get customization for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterDisplayName",
		"description": "Returns the display name for a character for the current session mode",
		"example": "heroName = GetCharacterDisplayName( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterFields",
		"description": "Returns info for the character pose playerbodytype",
		"example": "heroFields = GetCharacterFields( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterHeadRenderOptions",
		"description": "Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",
		"example": "helmetRenderOptions = GetCharacterHeadRenderOptions( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "headIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterHelmetHidesHead",
		"description": "Returns whether or not the characters head should be hidden based on the helmet",
		"example": "hideHead = GetCharacterHelmetHidesHead( 0, 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "helmetIndex",
				"description": "The index of the helmet belonging to that character",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The session mode ( mp cp zm )",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterHelmetModelColorCount",
		"description": "Returns the helmet model count for a character for the current session mode",
		"example": "heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "helmetStyleIndex",
				"description": "The index of the helmet style in the character",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterHelmetModelCount",
		"description": "Returns the helmet model count for a character for the current session mode",
		"example": "heroHelmetModelCount = GetCharacterHelmetModelCount( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterHelmetRenderOptions",
		"description": "Calculates the packed helmet render option - to be passed to SetBodyRenderOptions()",
		"example": "helmetRenderOptions = GetCharacterHelmetRenderOptions( 0, 1, 1, 2, 3 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "helmetIndex",
				"description": "The index of the helmet belonging to that character",
				"mandatory": true
			  },
			  {
				"name": "colorIndex1",
				"description": "The index of accent color 1",
				"mandatory": true
			  },
			  {
				"name": "colorIndex2",
				"description": "The index of accent color 2",
				"mandatory": true
			  },
			  {
				"name": "colorIndex3",
				"description": "The index of accent color 3",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCharacterIndex",
		"description": "Gets the character index",
		"example": "index = self GetCharacterIndex()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetCharacterModeRenderOptions",
		"description": "Calculates the packed mode render option - to be passed to SetBodyRenderOptions()",
		"example": "modeRenderOptions = GetCharacterModeRenderOptions( SESSIONMODE_MULTIPLAYER )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "session_mode",
				"description": "Session Mode enum index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetClientTime",
		"description": "Gets the current client time in milliseconds",
		"example": "currTime = ent GetClientTime()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetClones",
		"description": "Get an array of all the clones",
		"example": "clones = GetClones( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetControllerPosition",
		"description": "get current deflection of control, returns values via an array with vector values for \"look\" and \"move\" which correspond to those controls.  Values are -1 to 1 and represent the given axis on the vector",
		"example": "pos = self GetControllerPosition() ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want the position of",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCurrentAnimScriptedName",
		"description": "Get current frame for the given animation when its running.",
		"example": "animName = GetCurrentAnimScriptedName()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetCurrentWeaponIncludingMelee",
		"description": "Returns the name of the weapon being used by the specified local client, and will return the melee weapon if the client is in a melee state",
		"example": "currentWeapon = GetCurrentWeapon( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "getCybercomType",
		"description": "Gets the active cybercom type",
		"example": "cybercom_type = player getCybercomType()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetDemoVersion",
		"description": "Returns the demo version value",
		"example": "if ( GetDemoVersion() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetDistanceFromScreenCenter",
		"description": "Get the distance from the screen center to the entity",
		"example": "ent GetDistanceFromScreenCenter( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "getdynent",
		"description": "Get the dynent with the specified targetname",
		"example": "twig = getdynent(\"twig\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "getdynentarray",
		"description": "Get a dynent array with the specified targetname",
		"example": "twigs = getdynentarray(\"twig\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "GetEnemyScramblerAmount",
		"description": "Returns the amount alpha of the enemy scrambler applied",
		"example": "alpha = player GetEnemyScramblerAmount( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetEntArrayByType",
		"description": "Gets an array of entities that have the given the type of the entity ( for example, ET_MISSILE )",
		"example": "grenades = GetEntArray( 0, ET_MISSILE )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localclientnum",
				"description": "Which local client's entity list to use.",
				"mandatory": true
			  },
			  {
				"name": "type",
				"description": "Type of the entity. Look into shared.gsh for the ET enum",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedBodyAccentColorForHero",
		"description": "Returns an array of the equipped body accent colors of a specific hero",
		"example": "colorArray = GetEquippedBodyAccentColorForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's session mode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position",
				"mandatory": true
			  },
			  {
				"name": "bodyIndex",
				"description": "The index of the body",
				"mandatory": true
			  },
			  {
				"name": "colorIndex",
				"description": "The index of the accent color",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then we are supposed to retrieve for lobby client",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedBodyForHero",
		"description": "Returns the name of the equipped body model of a specific hero",
		"example": "modelName = GetEquippedBodyForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedBodyIndexForHero",
		"description": "Returns the index of the equipped body model of a specific hero",
		"example": "bodyIndex = GetEquippedBodyIndexForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "Character Session Mode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then we are supposed to retrieve for lobby client",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedCharacterIndexForLobbyClientHero",
		"description": "Returns the name of the equipped helmet accents colors of a specific hero",
		"example": "colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "lobbyClientQueueIndex",
				"description": "Queue index for lobby client, from which we get all his other information",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHeadIndexForHero",
		"description": "Returns the index of the equipped head index",
		"example": "helmetIndex = GetEquippedHeadIndexForHero( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then check for the equipped head on the client in the lobbyQueueIndex position",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHelmetAccentColorForHero",
		"description": "Returns the name of the equipped helmet accents colors of a specific hero",
		"example": "colorArray = GetEquippedHelmetAccentColorForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character session mode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "helmetIndex",
				"description": "The index of the helmet",
				"mandatory": true
			  },
			  {
				"name": "colorIndex",
				"description": "The index of the accent color",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then we are supposed to retrieve for lobby client",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHelmetForHero",
		"description": "Returns the name of the equipped helmet model of a specific hero",
		"example": "modelName = GetEquippedHelmetForHero( localClientNum, SESSIONMODE_MULTIPLAYER, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHelmetIndexForHero",
		"description": "Returns the index of the equipped helmet index of a specific hero",
		"example": "helmetIndex = GetEquippedHelmetIndexForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then we are supposed to retrieve for lobby client",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHeroIndex",
		"description": "Returns the index of the equipped hero for the client",
		"example": "heroIndex = GetEquippedHeroIndex( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedHeroMode",
		"description": "Returns the mode of the equipped hero for the client",
		"example": "heroIndex = GetEquippedHeroMode( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedLoadoutItemForHero",
		"description": "Returns 1 if the hero's ability is equipped, 0 if the weapon is equipped.",
		"example": "isAbilityEquipped = GetEquippedLoadoutItemForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetEquippedShowcaseWeaponForHero",
		"description": "Returns the showcase weapon of a specific hero",
		"example": "showcaseWeapon = GetEquippedShowcaseWeaponForHero( localClientNum, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "sessionMode",
				"description": "The character's sessionMode",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table or in case of lobby client, his queue position",
				"mandatory": true
			  },
			  {
				"name": "getForLobbyClient",
				"description": "If this is set then we are supposed to retrieve for lobby client",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFirstHeadOfGender",
		"description": "Returns the first head of gender (\"male\" or \"female\")",
		"example": "headIndex = GetFirstHeadOfGender( \"male\", \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "gender",
				"description": "\"male\" or \"female\"",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFirstHeroOfGender",
		"description": "Returns the first hero of gender (\"male\" or \"female\")",
		"example": "characterIndex = GetFirstHeroOfGender( \"male\", \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "gender",
				"description": "\"male\" or \"female\"",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFlowGraphDef",
		"description": "returns a struct representing the flow graph definition asset",
		"example": "flowGraphDef = GetFlowGraphDef( \"my_flow_graph\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "The name of the flow graph asset",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFootstepStrings",
		"description": "Returns an array containing all the footstep names",
		"example": "footstepNameArray = GetFootstepStrings()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetFriendlyScramblerAmount",
		"description": "Returns the amount alpha of the friendly scrambler applied",
		"example": "alpha = player GetFriendlyScramblerAmount( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetGadgetPower",
		"description": "Returns the current power level of the player gadget",
		"example": "power = GetGadgetPower( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  },
			  {
				"name": "slot",
				"description": "Slot of the gadget. Default is 0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeadGender",
		"description": "Returns the given head's gender (\"male\" or \"female\")",
		"example": "gender = GetHeadGender( headIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "headIndex",
				"description": "The index of the head",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHealthOverlayTime",
		"description": "Returns the time the health overlay has been on",
		"example": "power = GetHealthOverlayTime( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeliDamageState",
		"description": "Returns the damage state of the heli.",
		"example": "vehicle GetHeliDamageState( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetHelmetAccentColorCountForHero",
		"description": "Returns the number of accents for the specified helmet model of a specific hero",
		"example": "accentColorCount = GetHelmetAccentColorCountForHero( localClientNum, 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "heroIndex",
				"description": "The index of the hero in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "helmetIndex",
				"description": "The index of the helmet for the specific hero",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeroBodyModelIndices",
		"description": "Returns the given hero's body models for the current session mode",
		"example": "heroBodyModelNames = GetHeroBodyModels( heroIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "heroIndex",
				"description": "The index of the hero",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeroes",
		"description": "Returns all hero indices for the current session mode (or specified session mode)",
		"example": "heroIndices = GetHeroes()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "sessionmode",
				"description": "Session Mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeroGender",
		"description": "Returns the given hero's gender (\"male\" or \"female\")",
		"example": "gender = GetHeroGender( heroIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "heroIndex",
				"description": "The index of the hero",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHeroHeadModelIndices",
		"description": "Returns all hero indices for the current session mode",
		"example": "heroHelmetModelNames = GetHeroHelmetModels( heroIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetHeroHelmetModelIndices",
		"description": "Returns the given hero's helmet models for the current session mode",
		"example": "heroHelmetModelNames = GetHeroHelmetModelIndices( heroIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "heroIndex",
				"description": "The index of the hero",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "The session mode (cp,mp,zm)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetHorizontalOffsetFromScreenCenter",
		"description": "Get the distance from the screen center to the entity",
		"example": "ent GetDistanceFromScreenCenter( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to check",
				"mandatory": true
			  },
			  {
				"name": "width",
				"description": "width to check against",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetInKillcam",
		"description": "returns if the client is in killcam or not.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local_client_num",
				"description": "The local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetItemGroupForWeaponName",
		"description": "Returns the ref for a specific weapon name",
		"example": "ref = GetItemGroupForWeapon( weapon )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weaponName",
				"description": "Name of weapon to get item group",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetKillCamEntity",
		"description": "returns the killcamentity.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local_client_num",
				"description": "The local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetKnownLength",
		"description": "Get the known length of the sound",
		"example": "length = GetKnownLength( level.mySnd )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalClientAngles",
		"description": "Get the local client angles",
		"example": "client_angles = GetLocalClientAngles()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "the client to get angles for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalClientDriver",
		"description": "Returns the local client index of the driver of the vehicle if the driver is a local client or undefined.",
		"example": "driver = self GetLocalClientDriver( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetLocalClientEyePos",
		"description": "Gets the local client eye pos",
		"example": "eye_pos = GetLocalClientEyePos( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "the client to get eye pos for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalClientFOV",
		"description": "Get the local client field of view in degrees",
		"example": "client_fov = GetLocalClientFOV()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "the client index to get fov for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalClientNumber",
		"description": "Returns the local client number.",
		"example": "clientNum = self GetLocalClientNumber()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetLocalClientPos",
		"description": "Returns pos of localclient",
		"example": "origin = GetLocalClientPos( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "the client to get position",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalGunnerAngles",
		"description": "Returns the angles of the specified gunner, local to the vehicle itself.",
		"example": "localAngles = self GetLocalGunnerAngles( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "gunnerIndex",
				"description": "The index of the gunner seat",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalPlayer",
		"description": "Get the local player predicted centity.",
		"example": "GetLocalPlayer( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLocalPlayers",
		"description": "Get an array of all the local players",
		"example": "players = GetLocalPlayers()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetLocalPlayerTeam",
		"description": "Gets the team of the local player",
		"example": "team = GetLocalPlayerTeam( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetMapAtIndex",
		"description": "Get the name of the map at the given index in a mode's maptable.  Returns undefined if the given index doesn't index the given maptable",
		"example": "GetMapAtIndex( \"cp_mi_sing_blackstation\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "index",
				"description": "the index of the map you're looking for.",
				"mandatory": true
			  },
			  {
				"name": "dlcindex",
				"description": "dlc1..N if DLC.  If ommitted, use \"base\".",
				"mandatory": false
			  },
			  {
				"name": "sessionmodeabbrev",
				"description": "cp,mp,zm.  If ommitted, use current game mode abbreviation",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetMapFields",
		"description": "Get the outro movie of the current map in the maptable.  Returns undefined if currentmap wasn't found",
		"example": "fields = GetMapFields( GetNextMap(\"cp_mi_sing_blackstation\") )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "currentmap",
				"description": "the name of the current map.  If ommitted, use Dvar sv_mapname",
				"mandatory": false
			  },
			  {
				"name": "dlcindex",
				"description": "dlc1..N if DLC.  If ommitted, use \"base\".",
				"mandatory": false
			  },
			  {
				"name": "sessionmodeabbrev",
				"description": "cp,mp,zm.  If ommitted, use current game mode abbreviation",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetMaxLocalClients",
		"description": "Get the max number of local clients",
		"example": "max_clients = GetMaxLocalClients()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetMaxReverseSpeed",
		"description": "Get maximum reverse speed of a vehicle.",
		"example": "speed = vehicle GetMaxReverseSpeed()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetMigrationStatus",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetMovementType",
		"description": "Returns the movement type for the entity",
		"example": "movement_type = self GetMovementType()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetNonPredictedLocalPlayer",
		"description": "Get the local player non predicted centity.",
		"example": "GetNonPredictedLocalPlayer( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetNumFreeEntities",
		"description": "Get the number of free fake entities",
		"example": "numfree = GetNumFreeEntities( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client number",
				"description": "Which local client to spawn the entity for.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetOwner",
		"description": "Get an entity's owner",
		"example": "ent GetOwner( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetParentEntity",
		"description": "Gets the parent entity.  Requires client-side linking to be set up on the entity.",
		"example": "parent = self GetParentEntity( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetPlaybackTime",
		"description": "Get the playback time for the sound given by playbackId",
		"example": "time = GetPlaybackTime( level.mySnd )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetPlayerCorpse",
		"description": "Gets the most recent corpse fort he player",
		"example": "cybercom_type = player GetPlayerCorpse()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetPlayerGibDef",
		"description": "Returns string of gibdef for current player",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetPlayerLastOutWaterTime",
		"description": "Gets the last time the player was not underwater",
		"example": "waterTime = player GetPlayerLastOutWaterTime()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetPlayerName",
		"description": "Gets the character index",
		"example": "player_name = self GetPlayerName()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetPlayerVehicle",
		"description": "Returns undefined if the player is not in a vehicle",
		"example": "vehicle = GetPlayerVehicle( self )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "player",
				"description": "The player to check vehicle for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetPrimaryDeltaAnim",
		"description": "Returns the primary delta anim playing on this entity, or the name of the animation if the entity is in an animscripted state.",
		"example": "anim = self GetPrimaryDeltaAnim()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetRealTime",
		"description": "Get the real system time in milliseconds",
		"example": "time = GetRealTime()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetRevealPulseMaxRadius",
		"description": "Returns the max radius for the reveal vision pulse",
		"example": "power = GetRevealPulseMaxRadius( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetRevealPulseOrigin",
		"description": "Returns the pulse origin for the local client reveal pulse",
		"example": "power = GetRevealPulseOrigin( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetRevealPulseRadius",
		"description": "Returns the radius for the local client reveal pulse",
		"example": "power = GetRevealPulseRadius( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetRope",
		"description": "Returns the rope index based on targetname. Use it for ropes setuped in radiant. Returns -1, if not found.",
		"example": "GetRope( \"testrope\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "targetname",
				"description": "The targetname of the rope you interested in",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetScriptBundle",
		"description": "Returns the script bundle struct.",
		"example": "settings = GetScriptBundle( \"doorsettings\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetScriptBundleList",
		"description": "Returns the script bundle list array.",
		"example": "settings = GetScriptBundleList( \"doorsettings\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetScriptBundleNames",
		"description": "Returns all the names of the script bundles of the specified type in an array.",
		"example": "settings = GetScriptBundleNames( \"scene\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetScriptBundles",
		"description": "Returns a list of script bundles based on the type.",
		"example": "settings = GetScriptBundles( \"scenes\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetServerHighestClientFieldVersion",
		"description": "Returns the server's highest clientfield version.",
		"example": "if ( my_version < GetServerHighestClientFieldVersion() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetShoutcasterSetting",
		"description": "Gets the value of a shoutcaster setting.",
		"example": "GetGametypeSetting( \"who is going to win\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "setting",
				"description": "The setting name as a string.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetSoundFromSurfaceTable",
		"description": "Returns the fx for a given surface type from the surfacefxtable.",
		"example": "fx = GetSoundFromSurfaceTable( fx_surface_table, surface_type )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "surfacefxtable",
				"description": "Surface fx table.",
				"mandatory": true
			  },
			  {
				"name": "surface type",
				"description": "Surface type",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetSpawnStructForCharacter",
		"description": "Returns the targetname of the script_struct to use for the character pose in the frontend",
		"example": "frontendVignetteAnim = GetSpawnStructForCharacter( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetStreamerRequestProgress",
		"description": "Get the progress (between 0-100) of the streamer request slot",
		"example": "getStreamerRequestProgress(0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "slot",
				"description": "Request slot",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetStreamingProgress",
		"description": "Gets a progress value between 0 (no progress) and 1 (complete) for all the models and meshes that the script is currently forcing",
		"example": "progress = GetStreamingProgress()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetTargetLockEntity",
		"description": "Get locked target",
		"example": "target = self GetTargetLockEntity(<localclientnum>)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localclientnum",
				"description": "localclientnum",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTargetLockEntityArray",
		"description": "Get locked target",
		"example": "target = self GetTargetLockEntityArray(<localclientnum>)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetTopPlayersBodyModel",
		"description": "Returns the name of the equipped body model of the top player in the game by index",
		"example": "modelName = GetTopPlayersBodyModel( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersBodyRenderOptions",
		"description": "Returns the render options for the body for the top player in the game by index",
		"example": "renderOptions = GetTopPlayersBodyRenderOptions( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersGesture",
		"description": "Returns the selected gesture of type CharacterGestureTypes for the given player",
		"example": "gesture_anim = GetTopPlayersGesture( localClientNum, 2, 2 );\t// GESTURE_TYPE_BOAST = 2",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  },
			  {
				"name": "CharacterGestureTypes",
				"description": "The CharacterGestureTypes enum value of the gesture to use",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersHelmetModel",
		"description": "Returns the name of the equipped helmet model of the top player in the game by index",
		"example": "modelName = GetTopPlayersHelmetModel( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersHelmetRenderOptions",
		"description": "Returns the render options for the body for the top player in the game by index",
		"example": "renderOptions = GetTopPlayersHelmetRenderOptions( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersIndex",
		"description": "Returns the index of the client array or undefined if the client player is not a top scorer",
		"example": "topPlayerIndex = self GetTopPlayersIndex( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersTaunt",
		"description": "Returns the selected taunt of type CharacterTauntTypes for the given player",
		"example": "taunt_anim = GetTopPlayersTaunt( localClientNum, 2, 0 );\t// TAUNT_TYPE_FIRST_PLACE = 0",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  },
			  {
				"name": "CharacterGestureTypes",
				"description": "The CharacterTauntTypes enum value of the taunt to use",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersTeam",
		"description": "Returns the team of the player top player in the game by index",
		"example": "team = GetTopPlayersTeam( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersWeaponInfo",
		"description": "Returns the equipped weapon of the top player in the game",
		"example": "weapon = GetTopPlayersWeaponInfo( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersWeaponModel",
		"description": "Returns the name of the equipped weapon model of the top player in the game by index",
		"example": "modelName = GetTopPlayersWeaponModel( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopPlayersWeaponRenderOptions",
		"description": "Returns the render options for the weapon for the top player in the game by index",
		"example": "renderOptions = GetTopPlayersWeaponRenderOptions( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  },
			  {
				"name": "topPlayerIndex",
				"description": "The index of the top player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTopScorerCount",
		"description": "Returns the number of clients in the top scorers array",
		"example": "numClients = GetTopScorerCount( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the player in question",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetTotalAmmo",
		"description": "Returns the total amount of ammo the client has for the currently equipped weapon",
		"example": "ammoCount = GetTotalAmmo( localClientNum, \"ak47_mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  },
			  {
				"name": "weaponName",
				"description": "Name of the desired weapon to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVisionPulseMaxRadius",
		"description": "Returns the max radius for the localClients vision pulse",
		"example": "power = GetVisionPulseMaxRadius( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVisionPulseRadius",
		"description": "Returns the current radius for the localClients vision pulse",
		"example": "power = GetVisionPulseRadius( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRCamAnglesByLocalClientNum",
		"description": "Get the camera angles of the local client given",
		"example": "cam_angles = GetVRCamAnglesByLocalClientNum( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRCamPosByLocalClientNum",
		"description": "Get the camera position of the local client given",
		"example": "cam_origin = GetVRCamPosByLocalClientNum( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRControllerAngles",
		"description": "gets the world-space angles of the tracked VR controller",
		"example": "pos = self GetVRControllerAngles( 0, (60, 0, 0) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want the orientation of",
				"mandatory": true
			  },
			  {
				"name": "handIdx",
				"description": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRControllerGripButton",
		"description": "returns true if the grip button is pressed",
		"example": "holding = self GetVRControllerGripButton( 0 ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want",
				"mandatory": true
			  },
			  {
				"name": "handIdx",
				"description": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRControllerPosition",
		"description": "gets the world-space position of the tracked VR controller",
		"example": "pos = self GetVRControllerPosition( 0 ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want the position of",
				"mandatory": true
			  },
			  {
				"name": "handIdx",
				"description": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetVRControllerXButton",
		"description": "returns true if the grip button is pressed",
		"example": "holding = self GetVRControllerXButton( 0 ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want",
				"mandatory": true
			  },
			  {
				"name": "handIdx",
				"description": "0 for dominant hand, 1 for secondary hand. Secondary hand is not guaranteed to exist",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWeaponChargeLevel",
		"description": "Get the current charge level for charged shot weapons",
		"example": "charge = player GetWeaponChargeLevel()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetWeaponForCharacter",
		"description": "Returns the weapon at the given index",
		"example": "modelName = GetWeaponForCharacter( 0, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWeaponHackRatio",
		"description": "Get the players hack completion ratio",
		"example": "GetWeaponHackRatio(localClientNum, 1, \"hotgun_zm\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWeaponModelForCharacter",
		"description": "Returns the name of the weapon model of at the given index",
		"example": "modelName = GetWeaponModelForCharacter( 0, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWeaponPosFrac",
		"description": "Gets the weapon pos frac of the player. It only works for the player.",
		"example": "if ( player GetWeaponPosFrac(0) > 0.5 ) )...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "local client num",
				"description": "Player to get weapon pos frac for.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWeaponWithAttachments",
		"description": "Get the requested weapon object",
		"example": "GetWeapon( \"mp7_mp+acog\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weaponname",
				"description": "the name of the base weapon with attachments to return",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetXCamForCharacter",
		"description": "Returns the name of the xcam to use for the character pose in the frontend",
		"example": "frontendVignetteAnim = GetXCamForCharacter( characterIndex, \"mp\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "characterIndex",
				"description": "The index of the character in the current game-mode's character table",
				"mandatory": true
			  },
			  {
				"name": "sessionmode",
				"description": "Session Mode Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetXCamMouseControl",
		"description": "Get the current \"yaw\" and \"pitch\" of the mouse xcam.  Returns an array with two keys, \"yaw\" and \"pitch\".",
		"example": "xcammouse = GetXCamMouseControl( localclientnum ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the controller you want the mouse yaw/pitch of",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetXModelCenterOffset",
		"description": "Calculates the offset to the center of the model from the origin",
		"example": "offset = GetXModelCenterOffset( \"modelname\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "modelname",
				"description": "The name of the xmodel",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "HasAnimTree",
		"description": "Returns true if the entity has an anim tree",
		"example": "self HasAnimTree()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "HasDObj",
		"description": "Returns 1 if the entity currently has a dobj.",
		"example": "if(ent HasDObj(0))",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "local client number",
				"description": "number of the local client on the machine.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "InitClientObjectives",
		"description": "Delete a spawned effect.",
		"example": "InitObjectives( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "client on which to clear the objectives.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsADS",
		"description": "Returns true if this local client is in ADS, false otherwise",
		"example": "IsADS( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsAttached",
		"description": "Returns true if the model is attached to the entity",
		"example": "self IsAttached( \"somemodel\", \"tag_origin\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "modelname",
				"description": "The name of the model to test if attached.",
				"mandatory": true
			  },
			  {
				"name": "tagname",
				"description": "The tag to test",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsCameraSpikeToggled",
		"description": "Returns 1 if the camera spike is toggled to be active, 0 otherwise",
		"example": "if ( IsCameraSpikeToggled( 0 ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the camera spike owner",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsContentScreenFilterPlaying",
		"description": "Returns whether or not this player is playing a Graphics Content blocking filter at this moment or not.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsDemoPlaying",
		"description": "Returns true if a demo is currently playing back",
		"example": "if ( IsDemoPlaying() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsDriving",
		"description": "Returns true if the player is driving a vehicle.",
		"example": "if ( self IsDriving( <localClientNum> ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the caller",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsDynEntValid",
		"description": "Returns if the dynEnt still valid or not",
		"example": "if( IsDynEntValid( dyn_id) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "IsEntityLinkedToTag",
		"description": "Returns is the entity is linked to the parententity, ( on a specific tag optional )",
		"example": "if ( player IsEntityLinkedToTag( grenade, \"j_head\" ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "parententity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "entity",
				"description": "The entity that we are checking",
				"mandatory": true
			  },
			  {
				"name": "tag",
				"description": "The tag we are checking",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsFriendly",
		"description": "Returns true if entity is friendly",
		"example": "if ( entity IsFriendly( <localClientNum>, [predicted] ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localclientnum",
				"description": "Local client number of the local client you want to test against",
				"mandatory": true
			  },
			  {
				"name": "predicted",
				"description": "Test against predicted version, false by default",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "isGrenadeDud",
		"description": "Returns if a grenade is a dud",
		"example": "if ( grenade isGrenadeDud() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "grenade",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsInHelicopter",
		"description": "Returns true if the client is in a helicopter.",
		"example": "if( IsInHelicopter( 0 ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsInScrCam",
		"description": "Check if the camera of local client is in scripted camera",
		"example": "inScrCam = IsInScrCam( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsInScritpedAnim",
		"description": "Returns 1 if the entity currently has scripted animation playing.",
		"example": "if(ent IsInScritpedAnim())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsLocalClientDead",
		"description": "Checks if the pm_type > PM_DEAD",
		"example": "IsLocalClientDead()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsLocalClientDriver",
		"description": "Returns the driver of the vehicle.",
		"example": "driver = self IsLocalClientDriver(0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the caller",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsLocalPlayer",
		"description": "Returns true if the ent it's called on is a local player.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsLocalPlayerViewLinked",
		"description": "Returns whether or not this entity is linked to the given local client",
		"example": "if ( script_mover IsLocalPlayerWeaponViewOnlyLinked( localClientIndex ) ) { ... }",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum of the caller",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsLocalPlayerWeaponViewOnlyLinked",
		"description": "Returns whether or not this player is linked to an enity with weapon view only linking.",
		"example": "weaponviewonlylinked = self IsLocalPlayerWeaponViewOnlyLinked()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsOnTurret",
		"description": "Returns true if the player is currently on a turret",
		"example": "if( IsOnTurret( 0 ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsPeelingOut",
		"description": "Returns true if the vehicle is currently peeling out.",
		"example": "if ( self IsPeelingOut() ) { }",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerCorpse",
		"description": "Returns true if the ent it's called on is a player corpse.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerDead",
		"description": "Returns 1 if the entity currently has health of 0 or less",
		"example": "if(ent IsPlayerDead())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerDoubleJumping",
		"description": "Returns 1 if the player is currently double jumping (boosting)",
		"example": "if(ent IsPlayerDoubleJumping())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerFiring",
		"description": "Returns 1 if the player is currently firing",
		"example": "if(ent IsDead())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerJumping",
		"description": "Returns 1 if the player is currently jumping",
		"example": "if(ent IsPlayerJumping())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerSliding",
		"description": "Returns 1 if the player is currently sliding",
		"example": "if(ent IsPlayerSliding())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerSprinting",
		"description": "Returns 1 if the player is currently sprinting",
		"example": "if(ent IsPlayerSprinting())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerSwimmingOnSurface",
		"description": "Return if a player is swimming",
		"example": "swimming = player IsPlayerSwimmingOnSurface()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerSwimmingUnderwater",
		"description": "Return if a player is swimming",
		"example": "swimming = player IsPlayerSwimmingUnderwater()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerTalking",
		"description": "Returns 1 if the player is talking",
		"example": "if(ent IsPlayerTalking())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerWallRunning",
		"description": "Returns 1 if the player is currently wall running",
		"example": "if(ent IsPlayerWallRunning())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayerWallRunningRight",
		"description": "Returns 1 if the player is currently wall running right",
		"example": "if(ent IsPlayerWallRunning())",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsPlayingLoopSound",
		"description": "Returns true if the entity is playing a loop sound",
		"example": "car IsPlayingLoopSound()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "specific alias to check for",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsRobot",
		"description": "Returns true if the ent it's called on is a sentient vehicle i.e. a Robot.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsScrambled",
		"description": "Returns the if player is getting scrambled by an enemy",
		"example": "if ( player IsScrambled( ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsShoutcaster",
		"description": "Returns 1 if the local client is shoutcasting",
		"example": "if ( IsSpectating( localClientNum, false ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client to check",
				"mandatory": true
			  },
			  {
				"name": "checkFistPerson",
				"description": "Check if we want first person spectating to be not considered as spectate",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsSpectating",
		"description": "Returns 1 if the local client is spectating",
		"example": "if ( IsSpectating( localClientNum, false ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client to check",
				"mandatory": true
			  },
			  {
				"name": "checkFistPerson",
				"description": "Check if we want first person spectating to be not considered as spectate",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsSplitScreenHost",
		"description": "Returns true if local player is the host",
		"example": "if ( player IsSplitScreenHost() ) { }",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsStreamed",
		"description": "Returns true if this entity is fully streamed in",
		"example": "thing isStream()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsSwimming",
		"description": "Returns 1 if the player is swimming.",
		"example": "isSwimming = IsSwimming( localclientnum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsThirdPerson",
		"description": "Checks if the camera mode to third person if true",
		"example": "IsThirdPerson()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsUnderwater",
		"description": "Returns 1 if the player is underwater.",
		"example": "clipCount = IsUnderwater( localclientnum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsVisibleByPlayer",
		"description": "Returns 1 if the actor can be seen by a player",
		"example": "if( IsVisibleByPlayer(ent) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsWheelColliding",
		"description": "Returns if the given wheel is on the ground.",
		"example": "colliding = self IsWheelColliding( front_left )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "wheel",
				"description": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsWheelPeelingOut",
		"description": "Returns if the given wheel is sliding.",
		"example": "peeling = self IsWheelPeelingOut( front_left )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "wheel",
				"description": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsWheelSliding",
		"description": "Returns if the given wheel is sliding.",
		"example": "sliding = self IsWheelSliding( front_left )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "wheel",
				"description": "The wheel position, can be 'front_left', 'front_right', 'back_left', 'back_right', 'middle_left', 'middle_right'",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "launchdynent",
		"description": "Launch a dynent",
		"example": "launchdynent( brick, (0,0,200) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "force",
				"description": "the direction and magnitude of the force applied",
				"mandatory": true
			  },
			  {
				"name": "hitp",
				"description": "the location of the hitpoint in world space",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "LinkToCamera",
		"description": "Links an entity directly to the camera.  Good for scripted player arms.",
		"example": "swimming_arms LinkToCamera()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "linkType",
				"description": ", 0 - pitch only, 1 - yaw only, 2 - roll only, 3 - swimming, 4 - full, 5 - 3d compass.  Full is the default if not specified.\"",
				"mandatory": true
			  },
			  {
				"name": "offset",
				"description": "Vector of the offset",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "LoadSiegeAnim",
		"description": "Load a siege anim into memory",
		"example": "LoadSiegeAnim( \"flappy_bird\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "anim_name",
				"description": "Name of the siege anim to load",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LocalClientActive",
		"description": "Return whether local client is active",
		"example": "active = LocalClientActive( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "the client to check if it is active",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MapShaderConstant",
		"description": "Maps a shader constant to an index. Returns 1 if success, 0 on failure",
		"example": "ent mapshaderconstant( 0, \"shaderColor\" ); ent mapshaderconstant( 0, \"shaderColor\", 1, 0, 1, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client for which to map the shader constant",
				"mandatory": true
			  },
			  {
				"name": "index",
				"description": "the index you want this shader constant to map to",
				"mandatory": true
			  },
			  {
				"name": "constant name",
				"description": "a string that's the name of the shader constant",
				"mandatory": true
			  },
			  {
				"name": "x",
				"description": "initial value of x component",
				"mandatory": false
			  },
			  {
				"name": "y",
				"description": "initial value of y component",
				"mandatory": false
			  },
			  {
				"name": "z",
				"description": "initial value of z component",
				"mandatory": false
			  },
			  {
				"name": "w",
				"description": "initial value of w component",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "MarkAsDirty",
		"description": "Marks the entity as dirty",
		"example": "MarkAsDirty( entity )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "MisdirectionEnable",
		"description": "Enables or disables misdirection display",
		"example": "MisdirectionEnable( localclientnum, newVal )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number.",
				"mandatory": true
			  },
			  {
				"name": "bool",
				"description": "0 disables display, 1 enables it.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Objective_FlipIcon",
		"description": "Flips the icon of the objective",
		"example": "Objective_FlipIcon( self.friendlyObjID )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  },
			  {
				"name": "shouldFlipMaterial",
				"description": "1 if the material should be flipped, 0 otherwise",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "Objective_SetIcon",
		"description": "Sets the icon for the objective",
		"example": "Objective_SetIcon( localClientNum, clientObjID, \"remotemissile_target\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client that is using the objective",
				"mandatory": true
			  },
			  {
				"name": "objectiveNumber",
				"description": "The ID of the objective to alter",
				"mandatory": true
			  },
			  {
				"name": "materialName",
				"description": "The material to set",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Objective_SetIconSize",
		"description": "Sets the objective's scale for the icon.",
		"example": "objective_SetIconSize( localClientNum, clientObjID, 50 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client that is using the objective",
				"mandatory": true
			  },
			  {
				"name": "objective_number",
				"description": "The ID of the objective to alter",
				"mandatory": true
			  },
			  {
				"name": "scale",
				"description": "The value to scale the objective icon",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Objective_SetStencil",
		"description": "Sets the objective's stencil for the icon.",
		"example": "Objective_SetStencil( localClientNum, clientObjID, true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client that is using the objective",
				"mandatory": true
			  },
			  {
				"name": "objective_number",
				"description": "The ID of the objective to alter",
				"mandatory": true
			  },
			  {
				"name": "stencil",
				"description": "Set to true if you want the objective to stencil",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "OverrideLightingOrigin",
		"description": "Uses the entity origin as the lighting origin instead of the center of the entity's bounding area",
		"example": "door OverrideLightingOrigin()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "PlayerBeingSpectated",
		"description": "Returns the player the local client is spectating or the player himself if no spectating is going on",
		"example": "spectated = PlayerBeingSpectated( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ProcessClientFieldsAsIfNew",
		"description": "Process the client fields again",
		"example": "self ProcessClientFieldsAsIfNew()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "client",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "RadioActive_FX",
		"description": "Plays RadioActive/Fire FX",
		"example": "entity RadioActive_FX(0, true)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  },
			  {},
			  {},
			  {},
			  {}
			]
		  }
		]
	  },
	  {
		"name": "ReCacheLeaderboards",
		"description": "recaches local client leaderboard",
		"example": "recacheleaderboards(0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "RemoveAllFriendlyScramblers",
		"description": "removes all friendly scramblers",
		"example": "player RemoveAllFriendlyScramblers( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "RemoveAllSensorGrenadeAreas",
		"description": "removes all sensor grenade areas",
		"example": "player RemoveAllSensorGrenadeAreas( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "RemoveFriendlyScrambler",
		"description": "removes new friendly scrambler from the compass using the same handle you gave when creating it",
		"example": "player RemoveFriendlyScrambler( scrambler.handle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "handle",
				"description": "will be used to remove the scrambler",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RemoveSensorGrenadeArea",
		"description": "Removes Sensor Grenade Area from the compass",
		"example": "player RemoveSensorGrenadeArea( sensor.handle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "handle",
				"description": "will be used to remove the sensor",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RemoveZombieBoxWeapon",
		"description": "Removes a zombie box weapon",
		"example": "RemoveZombieBoxWeapon( weapon )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weapon",
				"description": "The weapon to remove",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RenderHealthOverlay",
		"description": "Returns the whether the health overlay should be rendered or not",
		"example": "yesno = RenderHealthOverlay( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RenderHealthOverlayHealth",
		"description": "Returns the whether the health overlay health ratio",
		"example": "yesno = RenderHealthOverlayHealth( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the player",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ResetWeaponCosts",
		"description": "Reset the zombie weapon costs",
		"example": "ResetWeaponCosts( <local client num>  )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "The local client num",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ResetZombieBoxWeapons",
		"description": "Reset the zombie box weapons",
		"example": "ResetZombieBoxWeapons()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "RopeGetPosition",
		"description": "Queries the position of the rope.",
		"example": "RopeGetPosition( ropeid, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "ropeid",
				"description": "The id of the rope",
				"mandatory": true
			  },
			  {
				"name": "frac",
				"description": "Value between 0 and 1 specifying what position we are querying.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RopePulse",
		"description": "Creates a stimulus that will effect ropes in the area and radius of the event.  Amount of movement is based on damage calculation.  Cheaper than physics events, as it only effects ropes.  Zero network cost, as it's on the client.",
		"example": "RopePulse(sRopePulse.origin, 10, 150, 100, 1); // 150 damage applied at 10 units or less, 1 damage applied at 150 units distance.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "origin",
				"description": "Where the event is.",
				"mandatory": true
			  },
			  {
				"name": "innerRadius",
				"description": "inner radius of event.  At this radius or lower, innerDamage is done.",
				"mandatory": true
			  },
			  {
				"name": "outerRadius",
				"description": "outer radius of event.  Maximum extent at which outerDamage is done.  Damage scales to innerDamage between outerRadius and innerRadius",
				"mandatory": true
			  },
			  {
				"name": "innerDamage",
				"description": "how much damage is applied at innerRadius, or lower.",
				"mandatory": true
			  },
			  {
				"name": "outerDamage",
				"description": "how much damage is applied at outerRadius.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerFieldIncrement",
		"description": "increment the value in a server field.  wrap on overflow.  ",
		"example": "ServerFieldIncrement(player, \"my_field\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "player",
				"description": "the player to operate on",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "Unique name to identify the field.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "serverfieldsetval",
		"description": "Register a server field.  server fields are variable bit length fields communicated from client to server",
		"example": "RegisterServerField(\"my_field\", VERSION_SHIP, 2, \"int\", ::my_cb_func); // registers a world int field with 2 bits of resolution, that can hold the values 0,1,2,3.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "player",
				"description": "the player to operate on",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "Unique name to identify the field.",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "the value of the field",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjective",
		"description": "Returns the index of the objective or undefined if it does not exist",
		"example": "objective_num = ServerObjective_GetObjective( localClientNum, \"dom_a\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveName",
				"description": "The name of the objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjectiveEntity",
		"description": "Returns the entity of the objective",
		"example": "origin = ServerObjective_GetObjectiveEntity( localClientNum, objective_num )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjectiveGameModeFlags",
		"description": "Returns the origin of the objective",
		"example": "origin = ServerObjective_GetObjectiveGameModeFlags( localClientNum, objective_num )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjectiveOrigin",
		"description": "Returns the index of the objective or undefined if it does not exist",
		"example": "origin = ServerObjective_GetObjectiveOrigin( localClientNum, objective_num )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjectiveProgress",
		"description": "Returns the origin of the objective",
		"example": "origin = ServerObjective_GetObjectiveProgress( localClientNum, objective_num )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ServerObjective_GetObjectiveTeam",
		"description": "Returns the origin of the objective",
		"example": "origin = ServerObjective_GetObjectiveTeam( localClientNum, objective_num )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "objectiveID",
				"description": "The index of objective",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SessionModeIsCampaignDeadOpsGame",
		"description": "Returns true/false if the current session mode is DeadOps game",
		"example": "if ( SessionModeIsCampaignDeadOpsGame() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SessionModeIsCampaignZombiesGame",
		"description": "Returns true/false if the current session mode is a campaign game and the campaign mode is set to zombies.",
		"example": "if ( SessionModeIsCampaignZombiesGame() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetAmbientSnapshot",
		"description": "Sets the ambient snapshot",
		"example": "SetAmbientSnapshot( level._sndActiveSnapshot )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "Name of the snapshot",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetAnimLimited",
		"description": "See \"SetAnim.",
		"example": "self SetAnimLimited( %precombatrun1, 1, 0.1, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "animation",
				"description": "The animation or animtree node to change.",
				"mandatory": true
			  },
			  {
				"name": "weight",
				"description": "Goal weight of this animation. Defaults to 1.0.",
				"mandatory": false
			  },
			  {
				"name": "time",
				"description": "Time to transition to this weight in seconds. Defaults to 0.2.",
				"mandatory": false
			  },
			  {
				"name": "rate",
				"description": "Playback rate of the animation. Defaults to 1.0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetAnimLimitedRestart",
		"description": "See \"SetAnim.",
		"example": "self SetAnimLimitedRestart( %precombatrun1, 1, 0.1, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "animation",
				"description": "The animation or animtree node to change.",
				"mandatory": true
			  },
			  {
				"name": "weight",
				"description": "Goal weight of this animation. Defaults to 1.0.",
				"mandatory": false
			  },
			  {
				"name": "time",
				"description": "Time to transition to this weight in seconds. Defaults to 0.2.",
				"mandatory": false
			  },
			  {
				"name": "rate",
				"description": "Playback rate of the animation. Defaults to 1.0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetAnimRestart",
		"description": "See \"SetAnim.",
		"example": "self SetAnimRestart( %precombatrun1, 1, 0.1, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "animation",
				"description": "The animation or animtree node to change.",
				"mandatory": true
			  },
			  {
				"name": "weight",
				"description": "Goal weight of this animation. Defaults to 1.0.",
				"mandatory": false
			  },
			  {
				"name": "time",
				"description": "Time to transition to this weight in seconds. Defaults to 0.2.",
				"mandatory": false
			  },
			  {
				"name": "rate",
				"description": "Playback rate of the animation. Defaults to 1.0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetBeastModeIconMaterial",
		"description": "sets the material used by beast mode icons",
		"example": "SetBeastModeIconMaterial( 1, \"cool_icon_1\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "iconid",
				"description": "1 melee 2 electricity 3 grapple",
				"mandatory": true
			  },
			  {
				"name": "materialname",
				"description": "material name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetBGBCost",
		"description": "Sets the current BGB cost",
		"example": "SetBGBCost( 115935 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "The local client num",
				"mandatory": true
			  },
			  {
				"name": "cost",
				"description": "The cost of a BGB",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetBlurByLocalClientNum",
		"description": "Sets the blur for the local client given",
		"example": "SetBlurByLocalClientNum( localClientNum, curr_info.magnitude, curr_info.transition_in )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "blurFinalValue",
				"description": "The blur value (must be positive)",
				"mandatory": true
			  },
			  {
				"name": "blurTime",
				"description": "The time to blur (must be positive)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetBodyRenderOptionsPacked",
		"description": "Sets the packed value of body render options (body type, style, colors)",
		"example": "gibEntity SetBodyRenderOptionsPacked( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "value",
				"description": "Usually returned value from GetBodyRenderOptionsPacked()",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCompassIcon",
		"description": "Sets the icon to be shown on the minimap",
		"example": "plane setCompassIcon(iconName)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "iconName",
				"description": "Name of compass material",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCorpseGibState",
		"description": "Sets the gib state for the body rendering.",
		"example": "corpse SetCorpseGibState( leg_state, arm_state )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "leg state",
				"description": "0 - 3 state: 0 is no gib, 1 right, 2 left, 3 both",
				"mandatory": true
			  },
			  {
				"name": "arm state",
				"description": "0 - 3 state: 0 is no gib, 1 right, 2 left, 3 both",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetDamageDirectionIndicator",
		"description": "Use the armor version of the hit indicator",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "indicator",
				"description": "0 = regular, 1 = armor",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetDrawName",
		"description": "Sets the drawnname of client ent",
		"example": "dude SetDrawName( \"dJVahn\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "text",
				"description": "The name.",
				"mandatory": true
			  },
			  {}
			]
		  }
		]
	  },
	  {
		"name": "SetDrawOwnerName",
		"description": "Draws the entity's owners name above the entity.",
		"example": "entity SetDrawOwnerName( true, true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "bool",
				"description": "Enable/Disable using the owners name.",
				"mandatory": true
			  },
			  {
				"name": "bool",
				"description": "Whether to always draw the name rega",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetDynEntBodyRenderOptionsPacked",
		"description": "Sets the packed value of body render options (body type, style, colors)",
		"example": "SetDynEntBodyRenderOptionsPacked( gibEntity, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "packed render options",
				"description": "Usually returned value from GetBodyRenderOptionsPacked()",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetDynEntEnabled",
		"description": "Set this dyn ent to enabled or disabled.  Disabled stops the physics and hides the dyn ent.",
		"example": "SetDynEntEnabled( brick, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "enabled",
				"description": "1 if dynent is enabled, 0 otherwise",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetEnemyGlobalScrambler",
		"description": "Set to true if there is a global enemy scrambler active",
		"example": "player SetEnemyGlobalScrambler( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "bool",
				"description": "true if there is a scrabler active, false otherwise",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetEnemyScramblerAmount",
		"description": "Sets the amount alpha of the scrambler applied to the compass",
		"example": "player SetEnemyScramblerAmount( 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "float",
				"description": "Between 0.0 and 1.0",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetEntBeastModeIconType",
		"description": "sets the beast mode icon shown for a particular entity",
		"example": "object SetBeastModeIconMaterial( 2, object.origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "iconid",
				"description": "1 melee 2 electricity 3 grapple",
				"mandatory": true
			  },
			  {
				"name": "location",
				"description": "icon location",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFlagAsAway",
		"description": "Sets a flag as away/home.",
		"example": "flag SetFlagAsAway( localClientNum, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "flag",
			  "description": null
			},
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client number",
				"mandatory": true
			  },
			  {
				"name": "away",
				"description": "A value of 1 sets the flag as away, 0 sets the flag as home",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetForceNotSimple",
		"description": "Set the forceNotSimple flag on the entity",
		"example": "self SetForceNotSimple()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetFriendlyNameDraw",
		"description": "turns on or off local client friendly name drawing",
		"example": "SetFriendlyNameDraw( true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "onOff",
				"description": "True if friendly name drawing is turned on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFriendlyScramblerAmount",
		"description": "Sets the amount alpha of the friendly scrambler applied",
		"example": "player SetFriendlyScramblerAmount( 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "float",
				"description": "Between 0.0 and 1.0",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetGlobalFutz",
		"description": "Sets the global futz",
		"example": "SetGlobalFutz( futz_name )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "The Futz name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetGroupSnapshot",
		"description": "Sets the group snapshot",
		"example": "SetGroupSnapshot( level._sndActiveSnapshot )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "Name of the snapshot",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetHealthSnapshot",
		"description": "Sets the health snapshot",
		"example": "SetHealthSnapshot( sn_name, sn_amount )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "The snapshot name",
				"mandatory": true
			  },
			  {
				"name": "amount",
				"description": "The amount",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetHideWhenScriptedAnimationCompleted",
		"description": "When playing a scene this will hide the entity when the scripted animation ends on it.",
		"example": "entity SetHideWhenScriptedAnimationCompleted()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetInfraredVisionSet",
		"description": "Set the vision when using infrared",
		"example": "entity SetInfraredVisionSet(\"visionName\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "visionNameInfrared",
				"description": "name of the vision set",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "setInTacticalHud",
		"description": "Sets if the player has the tactical hud open",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "onOff",
				"description": "false = off, true = on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLevelFadeSnapshot",
		"description": "Sets the level fade snapshot",
		"example": "SetLevelFadeSnapshot( sn_name, sn_amount )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "The snapshot name",
				"mandatory": true
			  },
			  {
				"name": "amount",
				"description": "The level fade amount",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLocalRadarEnabled",
		"description": "Sets whether a client's local radar is enabled.",
		"example": "SetLocalRadarEnabled( localClientNum, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number to set local radar on",
				"mandatory": true
			  },
			  {
				"name": "enabled",
				"description": "0 if disabled, 1 if enabled",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLocalRadarPosition",
		"description": "Sets the position of a client's local radar.",
		"example": "SetLocalRadarPosition( localClientNum, self.origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number to set local radar position on",
				"mandatory": true
			  },
			  {
				"name": "position",
				"description": "New position of the local radar",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLoopState",
		"description": "set pitch and volume per entity/alias",
		"example": "car SetLoopState( \"peugeot_idle_low\", 0.5, 1.0, 0.5, 0.2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "aliasname",
				"description": "The sound alias to play",
				"mandatory": true
			  },
			  {
				"name": "attenuation",
				"description": "The desired volume attenuation",
				"mandatory": true
			  },
			  {
				"name": "pitch",
				"description": "The desired pitch",
				"mandatory": true
			  },
			  {
				"name": "attenuation_rate",
				"description": "The desired attenuation rate",
				"mandatory": false
			  },
			  {
				"name": "pitch_rate",
				"description": "The desired pitch rate",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetMapLatLong",
		"description": "Sets the map's real world latitude & longitude and their corresponding map coordinates.",
		"example": "SetMapLatLong( 1000, 500, -118.448689, 34.021566 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "mapX",
				"description": "map X coordinate for which the longitude is given",
				"mandatory": true
			  },
			  {
				"name": "mapY",
				"description": "map Y coordinate for which the longitude is given",
				"mandatory": true
			  },
			  {
				"name": "longitude",
				"description": "world longitude of the given map position",
				"mandatory": true
			  },
			  {
				"name": "latitude",
				"description": "world latitude of the given map position",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetMaterialOverride",
		"description": "Set the material override",
		"example": "self SetMaterialOverride(\"water\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "surfaceName",
				"description": "The new material",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetNearestEnemyScrambler",
		"description": "Set the nearest enemy scrambler",
		"example": "player AddEnemyScrambler( scrambler )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": [
			  {
				"name": "cent",
				"description": "scrambler centity",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetRenderInThirdPersonSpectate",
		"description": "render the entity when spectated in 3rd person.",
		"example": "SetRenderInThirdPersonSpectate( true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "enable",
				"description": "Enable or disable redering the entity in 3rd person",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSAnim",
		"description": "Set the anim shot to play on a static model",
		"example": "thing SetSAnim( anim, shot, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "string anim name",
				"description": "name of a SANIM asset",
				"mandatory": true
			  },
			  {
				"name": "string shot name",
				"description": "shot name of the sub animation to play, pass in <int> 0 to play the first one.",
				"mandatory": false
			  },
			  {
				"name": "float time",
				"description": "frame to start playing on, default is 0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetScriptStreamBias",
		"description": "Sets the base importance of materials being forced from script",
		"example": "setScriptStreamBias( 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "bias",
				"description": "Streaming bias (0 is the highest importance)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "setshaderconstant",
		"description": "Set the value of a previously-mapped shader constant",
		"example": "ent setshaderconstant( 0, \"shaderColor\" , 0, 0, 0, 0)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client for which to set the shader constant",
				"mandatory": true
			  },
			  {
				"name": "index",
				"description": "An 0-based index that refers to a previously-mapped shader constant(see MapShaderConstant)",
				"mandatory": true
			  },
			  {
				"name": "x",
				"description": "A float value, x component of the shader constant",
				"mandatory": true
			  },
			  {
				"name": "y",
				"description": "A float value, y component of the shader constant",
				"mandatory": true
			  },
			  {
				"name": "z",
				"description": "A float value, z component of the shader constant",
				"mandatory": true
			  },
			  {
				"name": "w",
				"description": "A float value, w component of the shader constant",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetShowcaseWeaponPaintshopXUID",
		"description": "Set the showcase weapon paintshop XUID for the given local client num",
		"example": "SetShowcaseWeaponPaintshopXUID( localClientNum, xuid )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetSModelSAnimShot",
		"description": "Set the anim shot to play on a static model",
		"example": "SetSModelSAnimShot(\"tiny_bot_blend\", \"\", -1, true, false, true, 5*30)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "target name",
				"description": "target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)",
				"mandatory": true
			  },
			  {
				"name": "shot name",
				"description": "shot name of the sub animation to play, pass in <int> 0 to play the first one. (string)",
				"mandatory": false
			  },
			  {
				"name": "time",
				"description": "frame to start playing on, pass in -1 to use the static model random frame, this is the default. (float)",
				"mandatory": false
			  },
			  {
				"name": "loop",
				"description": "this is unused, looping is set in the asset editor. (integer)",
				"mandatory": false
			  },
			  {
				"name": "append",
				"description": "If !0 the animation will be played after the current animation(s), any loop flags in current animations are ignored. If 0, it will replace the current and any appended animation with the current one.(integer)",
				"mandatory": false
			  },
			  {
				"name": "blend",
				"description": "If !0 new animation will blend into the new one. default is 0 (integer)",
				"mandatory": false
			  },
			  {
				"name": "frames to blend",
				"description": "If number of frames to blend over (float)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSonarAttachmentEnabled",
		"description": "Set the sonar attachment to be enabled or disabled",
		"example": "entity SetSonarAttachmentEnabled(false)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "enable",
				"description": "true/false",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundContext",
		"description": "Set the sound context",
		"example": "SetSoundContext (\"ringoff_plr\", \"outdoor\"); //for weapon decay's",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "type",
				"description": "The type of context",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "The value for that type",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundEntContext",
		"description": "Sets the entity sound context",
		"example": "car SetSoundEntContext(\"type\", \"value\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "type",
				"description": "Sound Context type",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "Sound Context value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundPitch",
		"description": "Set the sound pitch",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  },
			  {
				"name": "pitch",
				"description": "The new pitch",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundPitchRate",
		"description": "Set the sound pitch rate",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  },
			  {
				"name": "pitchRate",
				"description": "The new pitch rate",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundVolume",
		"description": "Set the sound volume",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  },
			  {
				"name": "attenuation",
				"description": "The attenuation of the sound",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetSoundVolumeRate",
		"description": "Set the sound volume rate",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound id",
				"mandatory": true
			  },
			  {
				"name": "attenuationRate",
				"description": "The new volume rate",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetStepTriggerSound",
		"description": "Set the sound that is triggered by steps",
		"example": "trigPlayer SetStepTriggerSound(self.script_label + suffix)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "sound alias",
				"description": "The sound name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetStreamerRequest",
		"description": "Put a streamer hint asset into a request slot (0-7)",
		"example": "setStreamerRequest(0, \"apple_pie\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "slot",
				"description": "Request slot",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "Name of the streamer hint asset",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetStunned",
		"description": "Puts the vehicle or takes the vehicle out of stun mode.  Only works for nitrous vehicles.",
		"example": "vehicle SetStunned( 0, true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "vehicle",
			  "description": null
			},
			"parameters": [
			  {
				"name": "stunned",
				"description": "True/false stun state",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetTeamReviveIcon",
		"description": "Set the revive icon used by particular teams",
		"example": "SetTeamReviveIcon( \"allies\", \"waypoint_revive_cdc_zm\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "material",
				"description": "The icon to use",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetThirdPerson",
		"description": "Sets the camera mode to third person if true",
		"example": "SetThirdPerson( true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "onOff",
				"description": "set third person mode to this value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetUnderwaterVisionSet",
		"description": "Set the vision when underwater",
		"example": "entity SetUnderwaterVisionSet(\"visionName\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "visionNameUnderwater",
				"description": "name of the vision set",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetupClientFieldAnimSpeedCallbacks",
		"description": "Registers a code callback for each of the given clientfield names in a field pool.",
		"example": "SetupClientFieldAnimSpeedCallbacks( \"world\", 1, \"flag_a_owner\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "setupclientfieldcodecallbacks",
		"description": "Registers a LUI code callback for each of the given clientfield names in a field pool.",
		"example": "SetupClientFieldLuiCodeCallbacks( \"world\", 1, \"flag_a_owner\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetupClientFieldLuiCodeCallbacks",
		"description": "Registers a LUI code callback for each of the given clientfield names in a field pool.",
		"example": "SetupClientFieldLuiCodeCallbacks( \"world\", 1, \"flag_a_owner\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetupFieldOpsKitLoadouts",
		"description": "Sets up all the field ops custom classes (using slots 6 through 9)",
		"example": "SetupFieldOpsKitLoadouts( mapname )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "mapname",
				"description": "The map to load the field ops kits for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetWaterDisturbanceParams",
		"description": "Sets parameters describing the water disturbance created by the (script mover) entity",
		"example": "self SetWaterDisturbanceParams( 0.5, 500, 1500, 0.2, 70 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "force",
				"description": "The force of the disturbance influences the height and size of the wave",
				"mandatory": true
			  },
			  {
				"name": "length",
				"description": "How long the wave is in the direction of travel",
				"mandatory": true
			  },
			  {
				"name": "width",
				"description": "How wide the wave is (across direction of travel)",
				"mandatory": true
			  },
			  {
				"name": "damping",
				"description": "How much the wave damps the water after it travels; larger values (>1) will cause the wave to leave very little wake, smaller values will leave lots of disturbance behind the wave.  Keep > 0.",
				"mandatory": true
			  },
			  {
				"name": "angle",
				"description": "The angle of the surge line in degrees; 0 -> +X",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetWaveWaterEnabled",
		"description": "Makes a water completely appear or disappear",
		"example": "SetWaveWaterEnabled( \"huge_lake\", true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "water name",
				"description": "The name of the water affected, or empty string for all",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "whether water should be visible",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetWaveWaterHeight",
		"description": "Sets the height of one or all waters in a level",
		"example": "SetWaveWaterHeight( \"huge_lake\", 15.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "water name",
				"description": "The name of the water affected, or empty string for all",
				"mandatory": true
			  },
			  {
				"name": "height",
				"description": "The new height value in world coordinates",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetWeaponCosts",
		"description": "Sets the cost of a weapon for use by prompts",
		"example": "SetWeaponCosts( weapon, weapon.cost, weapon.ammoCost, weapon.secretshopperCost )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client num",
				"description": "The local client num",
				"mandatory": true
			  },
			  {
				"name": "weapon",
				"description": "The weapon to add",
				"mandatory": true
			  },
			  {
				"name": "weaponCost",
				"description": "Cost to buy the weapon",
				"mandatory": true
			  },
			  {
				"name": "ammoCost",
				"description": "Cost to buy ammo",
				"mandatory": true
			  },
			  {
				"name": "playerAmmoCost",
				"description": "Cost to buy ammo through secret shopper",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SiegeCmd",
		"description": "Apply a number of anim commands on a siege model",
		"example": "thing SiegeCmd( \"set_shot\", \"myshot\", \"unpause",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "string cmd",
				"description": "cmd to execute.",
				"mandatory": true
			  },
			  {
				"name": "string cmd",
				"description": "more cmd's...",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SModelAnimCmd",
		"description": "Apply a number of anim commands on a siege model",
		"example": "SModelAnimCmd(\"targetName\",\"pause\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "target",
				"description": "target name of the static model or <int index> The index of the static model or <array int indices> The indices of the static models (string)",
				"mandatory": true
			  },
			  {
				"name": "cmd",
				"description": "cmd to execute. (string)",
				"mandatory": true
			  },
			  {
				"name": "cmd",
				"description": "more cmd's... (string)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundLineEmitter",
		"description": "Play a sound from start point to end point",
		"example": "SoundLineEmitter( \"wpn_micro_turret_loop\", start, end )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "origin 1",
				"description": "start point",
				"mandatory": true
			  },
			  {
				"name": "origin 2",
				"description": "end point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundLoopEmitter",
		"description": "Play a sound loop at the position",
		"example": "SoundLoopEmitter(\"evt_beacon_loop_red\", self.origin)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "position",
				"description": "The position to play sound at",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundPlayAutoFX",
		"description": "This function is used to play audio on createfx ents.",
		"example": "SoundPlayAutoFX( \"fx_fire_barrel\", \"amb_fire_small\", 5, -10, 5, false, 20, 5, \"amb_fire_large\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "fxid",
				"description": "The ID of the FX you want to play alias off.",
				"mandatory": true
			  },
			  {
				"name": "alias",
				"description": "Audio alias.",
				"mandatory": true
			  },
			  {
				"name": "offsetx",
				"description": "Offset x from effect origin to play the sound.",
				"mandatory": false
			  },
			  {
				"name": "offsety",
				"description": "Offset y from effect origin to play the sound.",
				"mandatory": false
			  },
			  {
				"name": "offset",
				"description": "Offset z from effect origin to play the sound.",
				"mandatory": false
			  },
			  {
				"name": "onground",
				"description": "Do a trace to ground to ensure audio is played above ground.",
				"mandatory": false
			  },
			  {
				"name": "area",
				"description": "If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead.",
				"mandatory": false
			  },
			  {
				"name": "threshold",
				"description": "If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead.",
				"mandatory": false
			  },
			  {
				"name": "alias_override",
				"description": "If #threshold multiple effects of same id in target radius #area, play alias_override at center of fx instead.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundPlaying",
		"description": "Returns true if the sound given by sound id is playing",
		"example": "while( soundplaying( soundId ) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "playbackId",
				"description": "The sound  id",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundRattle",
		"description": "Set the rattle sound's origin, min distance and max distance",
		"example": "soundrattle(origin,min,max)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "origin",
				"description": "The position",
				"mandatory": true
			  },
			  {
				"name": "minDist",
				"description": "The min distance to play sound",
				"mandatory": true
			  },
			  {
				"name": "maxDist",
				"description": "The max distance to play sound",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundRattleSetup",
		"description": "Play a rattle sound at the position",
		"example": "SoundRattleSetup(rattles[i].script_sound, rattles[i].origin)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "position",
				"description": "The position to play sound at",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundSetMusicState",
		"description": "Set the music state for the sound",
		"example": "SoundSetMusicState( state_id )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "state id",
				"description": "The state identifier",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundStopLineEmitter",
		"description": "Stops the sound playing from start point to end point",
		"example": "SoundStopLineEmitter( \"wpn_micro_turret_loop\", start, end )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "origin 1",
				"description": "start point",
				"mandatory": true
			  },
			  {
				"name": "origin 2",
				"description": "end point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundStopLoopEmitter",
		"description": "Stop the sound loop emitter at the position",
		"example": "SoundStopLoopEmitter(\"evt_beacon_loop_green\", self.origin)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "position",
				"description": "The position",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundTimeScale",
		"description": "Set the sound time scale",
		"example": "SoundTimeScale( 1.1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "time",
				"description": "The new time scale",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SoundUpdateLineEmitter",
		"description": "Updates the sound playing from previous start point to previous end point",
		"example": "SoundUpdateLineEmitter( \"wpn_micro_turret_loop\", previousStart, previousEnd, start, end )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "alias",
				"description": "The sound alias name",
				"mandatory": true
			  },
			  {
				"name": "previous origin 1",
				"description": "start point",
				"mandatory": true
			  },
			  {
				"name": "previous origin 2",
				"description": "end point",
				"mandatory": true
			  },
			  {
				"name": "origin 1",
				"description": "start point",
				"mandatory": true
			  },
			  {
				"name": "origin 2",
				"description": "end point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "spawndynent",
		"description": "Spawn a dynent",
		"example": "twig = spawndynent( \"trashcan\", origin, angles )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "model",
				"description": "The model of the dynent",
				"mandatory": true
			  },
			  {
				"name": "origin",
				"description": "The position",
				"mandatory": true
			  },
			  {
				"name": "angles",
				"description": "The angles",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopAllLoopSounds",
		"description": "Stops a loop sound",
		"example": "car StopAllLoopSounds( 0.5 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "fade",
				"description": "The fade out time",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopForceStreamingMaterial",
		"description": "Forces the streamer to load the texture LODs for a material even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingMaterial when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
		"example": "StopForceStreamingMaterial( material )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "material",
				"description": "Material to stop force streaming",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopForceStreamingXModel",
		"description": "Forces the streamer to load model and texture LODs for a model even if it isn't yet visible.  Returns true when all levels are loaded.  Call StopForceStreamingXModel when you no longer need it, or Steve will be upset that you're wasting Streamer memory.",
		"example": "areAllForcedLodsLoaded = CScr_StopForceStreamingXModel( model )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "model",
				"description": "The model to stop force streaming",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopForcingStreamer",
		"description": "Remove all streamer forcing",
		"example": "StopForcingStreamer()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "StreamerNotify",
		"description": "Send a streamer notify to the server indicating that the streamer is ready",
		"example": "StreamerNotify(1)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "id",
				"description": "integer value indicating the current streamer notify",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StreamTextureList",
		"description": "Specify a texture list file for the streamer to load",
		"example": "StreamTextureList( \"igc1\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "name",
				"description": "Texturelist to stream",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SubtitlePrint",
		"description": "print to the subtitle channel",
		"example": "SubtitlePrint( 0, 100, \"zombies everywhere\") ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The localClientNum to flush the subtitles for",
				"mandatory": true
			  },
			  {
				"name": "msec",
				"description": "The time to display the subtitle for",
				"mandatory": true
			  },
			  {
				"name": "subtitle",
				"description": "The message to display",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TracePoint",
		"description": "Traces a poitn throught the world with MASK_SHOT. Returns hit position, hit surface normal.",
		"example": "trace = TracePoint( p0, p1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "start",
				"description": "Start point",
				"mandatory": true
			  },
			  {
				"name": "end",
				"description": "End point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Underwater",
		"description": "checks if the player or actor is underwater",
		"example": "if( player Underwater() ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player_actor",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "UnloadSiegeAnim",
		"description": "Unload a siege anim from memory",
		"example": "UnloadSiegeAnim( \"flappy_bird\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "anim_name",
				"description": "Name of the siege anim to unload",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "UseAlternateAimParams",
		"description": "Forces the local player to use alternate values for aim assist. Only works in zombie/campaign mode. Can only be called on players",
		"example": "self UseAlternateAimParams( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "player",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "UseAlternateHud",
		"description": "Use the alternate HUD in lui. Zombies only",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "onOff",
				"description": "0 = regular, 1 = alternate",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ViewmodelHasTag",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local_client_num",
				"description": "The client number",
				"mandatory": true
			  },
			  {
				"name": "tag",
				"description": "The tag to see if it exists on the current weapon",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VrIsActive",
		"description": "Returns whether the game is currently in VR mode.",
		"example": "do_vr_stuff = VrIsActive() ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "WeaponFriendlyHacking",
		"description": "Returns the value of the friendlyHacking bit on the specified weapon of the specified player",
		"example": "currentWeapon = GetCurrentWeapon( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client number of the player",
				"mandatory": true
			  },
			  {
				"name": "localClientNum",
				"description": "Weapon to check",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ZBarrierGetPiece",
		"description": "Gets the entity for the zbarrier's given piece index",
		"example": "zbarrier ZBarrierGetPiece( 3 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "piece_index",
				"description": "piece index to get",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddBoltedFXExclusionVolume",
		"description": "Create a bolted volume that will exclude FX that are flagged as \"Respect Exclusion Volumes\". Returns volume ID.",
		"example": "volumeID = AddBoltedFXExclusionVolume( 0, entity, tag_origin, (10, 10, 10) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to create the volume on.",
				"mandatory": true
			  },
			  {
				"name": "entity",
				"description": "The entity to attach the volume to.",
				"mandatory": true
			  },
			  {
				"name": "tag name",
				"description": "The tag to use as the volume's origin.",
				"mandatory": true
			  },
			  {
				"name": "half extents",
				"description": "The half extents of the volume.",
				"mandatory": true
			  },
			  {
				"name": "offset",
				"description": "An offset from the tag name for the volume's origin; default is 0 0 0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddDuplicateRenderOption",
		"description": "Add a duplicate render option for the entity",
		"example": "myEnt AddDuplicateRenderOption( DR_TYPE_FRAMEBUFFER, DR_METHOD_THERMAL_MATERIAL, DR_CULL_ALWAYS )myEnt AddDuplicateRenderOption( DR_TYPE_OFFSCREEN, DR_METHOD_CUSTOM_MATERIAL, DR_CULL_NEVER, mapped_material_id(player,\"gfx_my_material_2\") )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "dupeType",
				"description": "this is one of [DR_TYPE_FRAMEBUFFER|DR_TYPE_FRAMEBUFFER_DUPLICATE|DR_TYPE_OFFSCREEN], as defined in _duplicaterender.csc. Sets the duplicate type of this call",
				"mandatory": true
			  },
			  {
				"name": "dupeMethod",
				"description": "this is one of [DR_CULL_ALWAYS|DR_CULL_NEVER], as defined in _duplicaterender.csc. Sets the render method of this call",
				"mandatory": true
			  },
			  {
				"name": "mappedMaterialId",
				"description": "This is the mapped material id",
				"mandatory": false
			  },
			  {
				"name": "dupeCull",
				"description": "this is one of [DR_METHOD_OFF|DR_METHOD_DEFAULT_MATERIAL|DR_METHOD_THERMAL_MATERIAL|DR_METHOD_CUSTOM_MATERIAL|DR_METHOD_FORCE_CUSTOM_MATERIAL], as defined in _duplicaterender.csc. Sets the render method of this call",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "AddFXExclusionVolume",
		"description": "Create a volume that will exclude FX that are flagged as \"Respect Exclusion Volumes\". Returns volume ID.",
		"example": "volumeID = AddFXExclusionVolume( 0, (0,0,0), (0, 45, 0), (10, 10, 10) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to create the volume on.",
				"mandatory": true
			  },
			  {
				"name": "center",
				"description": "The center of the volume.",
				"mandatory": true
			  },
			  {
				"name": "angles",
				"description": "The rotation angles of the volume.",
				"mandatory": true
			  },
			  {
				"name": "half extents",
				"description": "The half extents of the volume.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "BeamKill",
		"description": "Kill the previously launched beam.",
		"example": "BeamKill(0, beamHandle)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the beam",
				"mandatory": true
			  },
			  {
				"name": "beam handle",
				"description": "The beam handle",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "BeamLaunch",
		"description": "Launch this beam and return the internal handle.",
		"example": "handle = BeamLaunch(0, launcher, launcherTag, target, targetTag, beam)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the beam",
				"mandatory": true
			  },
			  {
				"name": "entity from",
				"description": "The originating entity",
				"mandatory": true
			  },
			  {
				"name": "tag from",
				"description": "The tag on the originating entity to start from",
				"mandatory": true
			  },
			  {
				"name": "entity to",
				"description": "The target entity",
				"mandatory": true
			  },
			  {
				"name": "tag to",
				"description": "The target tag",
				"mandatory": true
			  },
			  {
				"name": "beam",
				"description": "The beam",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "BulletTracer",
		"description": "creates a bullet tracer from the start to end point",
		"example": "BulletTracer(self.origin, target.origin)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "start",
				"description": "The starting point bullet tracer",
				"mandatory": true
			  },
			  {
				"name": "end",
				"description": "The end point bullet tracer",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CaptureFrame",
		"description": "Captures the current frame into the given code image - he image had to be already created with CreateSceneCodeImage()",
		"example": "CaptureFrame( self.localClientNum, \"freezeFrame\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "name",
				"description": "The code image name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ClearExtraCam",
		"description": "Finds the extracam associated with an entity and removes it",
		"example": "cameraEnt ClearExtraCam()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "codeplaypostfxbundle",
		"description": "Displays a postfx on the screen ",
		"example": "entity PlayPostfxBundle( \"myBundle\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "codestoppostfxbundle",
		"description": "Ends a postfx ",
		"example": "entity StopPostfxBundle( 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "CreateSceneCodeImage",
		"description": "Creates a scene size code image",
		"example": "CreateSceneCodeImage( self.localClientNum, \"freezeFrame\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "name",
				"description": "A unique name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DeleteFX",
		"description": "Delete a spawned effect.",
		"example": "deletefx (0, fxRef)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "client on which to spawn effect.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by spawnfx",
				"mandatory": true
			  },
			  {
				"name": "deleteImmediate",
				"description": "whether effect will be deleted immediately. Default is 1.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "DisableDuplicateRendering",
		"description": "Disables duplicate rendering for the entity",
		"example": "entity DisableDuplicateRendering()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "EnableFrontendLockedWeaponOverlay",
		"description": "Enable or disable the draw of the locked gun postfx in script.",
		"example": "entity EnableFrontendLockedWeaponOverlay( 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "enable",
				"description": "0-disable 1-enable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "EnableFrontendStreamingOverlay",
		"description": "Enable or disable the draw of an alternate draw mode for high detail entities marked to use alt draw",
		"example": "entity EnableFrontendStreamingOverlay( 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "enable",
				"description": "0-disable 1-enable",
				"mandatory": true
			  },
			  {
				"name": "extracam",
				"description": "0-disable 1-enable - when enabled the overlay is drawn on extracam",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "EnableFrontendTokenLockedWeaponOverlay",
		"description": "Enable or disable the draw of the purchaseable gun postfx in script.",
		"example": "entity EnableFrontendTokenLockedWeaponOverlay( 0, 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "enable",
				"description": "0-disable 1-enable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "EnableThermalDraw",
		"description": "Enables or disables the drawing entities into the thermal buffer",
		"example": "EnableThermalDraw( player.localClientNum, true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "enable",
				"description": "true/false",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "EVEnable",
		"description": "Enable or disable ev mode",
		"example": "entity EVEnable( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "EvStatus",
		"description": "returns the status of EV",
		"example": "status = EVStatus( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to find the status of",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FindStaticModelIndex",
		"description": "Returns an index of a static model whose origin matches the passed in position",
		"example": "smodelIndex = FindStaticModelIndex()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector pos",
				"description": "The position to match to the static model origin or <string targetname> for the targetname of the static model",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FindStaticModelIndexArray",
		"description": "Returns an array indices of a static model whose name matches the passed in string",
		"example": "smodelIndexArray = FindStaticModelIndex()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string targetname",
				"description": "The targetname of the static model's",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FindVolumeDecalIndexArray",
		"description": "Returns an array indices of a volume decal whose targetname matches the passed in string",
		"example": "vdIndexArray = FindVolumeDecalIndexArray( \"foo\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string targetname",
				"description": "The targetname of the volume decal",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FreeCodeImage",
		"description": "Frees a code image",
		"example": "FreeCodeImage( self.localClientNum, \"freezeFrame\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "name",
				"description": "A unique name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetCameraSpikeCamStatic",
		"description": "Returns 1 if a client sees static on the camera-spike cam, 0 otherwise",
		"example": "GetCameraSpikeCamStatic( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the camera-spike cam owner",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFXFromSurfaceTable",
		"description": "Returns the fx for a given surface type from the surfacefxtable.",
		"example": "fx = GetFXFromSurfaceTable( fx_surface_table, surface_type )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "surfacefxtable",
				"description": "Surface fx table.",
				"mandatory": true
			  },
			  {
				"name": "surface type",
				"description": "Surface type",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetServerVolumetricFogDensity",
		"description": "Get the density of server volumetric fog",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetSurfaceStrings",
		"description": "Returns an array containing all the surface names",
		"example": "surfaceStringArray = GetSurfaceStrings()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetVisionSetNaked",
		"description": "Gets players' naked vision.",
		"example": "GetVisionSetNaked( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client which will have his vampire vision set changed",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetWorldFogScriptID",
		"description": "current active .fsi fog volumes script identity value -1 = global volume.",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "HideStaticModel",
		"description": "Hide a static model",
		"example": "HideStaticModel( model )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "smodelIndex",
				"description": "The index of the static model to toggle",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "HideVolumeDecal",
		"description": "Hide a static model",
		"example": "HideStaticModel( model )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "volume decal Index",
				"description": "The index of the volume decal to toggle",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IGCActive",
		"description": "Flags if an IGC is on or off",
		"example": "IGCActive( 1, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which the igc is running",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "1-enables, 0-disables",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsFXPlaying",
		"description": "Return true if effect is still playing.",
		"example": "IsFXPlaying ( fxId )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client the effect is playing on.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by playFx",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsIGCActive",
		"description": "returns the status of EV",
		"example": "status = IsIGCActive( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to find the status of",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsStereoOn",
		"description": "Returns true if the stereo is on",
		"example": "isStereo = IsStereoOn()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "KillFX",
		"description": "Force kills a given fx.",
		"example": "KillFX ( fxId )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client the effect is playing on.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by playFx",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "KillRadiantExploder",
		"description": "Kill the specified Radiant exploder",
		"example": "KillRadiantExploder( 0, \"lights_on_exploder\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to play the effect on",
				"mandatory": true
			  },
			  {
				"name": "exploderId",
				"description": "The id of the exploder to be stopped.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MakeLight",
		"description": "Create a light",
		"example": "self MakeLight(1)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "primaryLightIndex",
				"description": "The Primary Light Index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MapMaterialIndex",
		"description": "Maps the material to an index",
		"example": "index = MapMaterial(1, \"mymaterial\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to map the material",
				"mandatory": true
			  },
			  {
				"name": "materialName",
				"description": "Material to map",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_Enable",
		"description": "Enable or disable the sitrep scan",
		"example": "entity motionpulse_enable( false )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "enable",
				"description": "true to enable /false to disable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetDesat",
		"description": "Set the motion pulse desaturation level",
		"example": "entity motionpulse_setdesat( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "The desat level (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetFadeOut",
		"description": "Set the motion pulse fadeout",
		"example": "entity MotionPulse_SetFadeOut( fadeout )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "fadeout",
				"description": "The fadeout (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetFalloff",
		"description": "Set the motion pulse falloff",
		"example": "entity motionpulse_setfalloff( falloff )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "falloff",
				"description": "the falloff (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetLineWidth",
		"description": "Set the motion pulse line width",
		"example": "entity motionpulse_setlinewidth( linewidth )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "linewidth",
				"description": "the line width (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetOutline",
		"description": "Set the motion pulse outline level",
		"example": "entity motionpulse_setoutline( outlinelevel )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "outlinelevel",
				"description": "the outline level (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetRadius",
		"description": "Set the motion pulse radius",
		"example": "entity motionpulse_setradius( radius )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "radius",
				"description": "the radius (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MotionPulse_SetSolid",
		"description": "Set the motion pulse solid level",
		"example": "entity motionpulse_setsolid( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "The solid level (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_NightVision_Enable",
		"description": null,
		"example": "entity oed_nightvision_enable( false )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "enable",
				"description": "true/false",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_NightVision_Reset",
		"description": "Reset nightvision for entity",
		"example": "entity oed_nightvision_reset()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "OED_NightVision_SetTextureLevel",
		"description": "Set the night vision texture level for the entity",
		"example": "entity oed_nightvision_settexturelevel( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "The texture level (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_Enable",
		"description": "Enable or disable the sitrep scan",
		"example": "entity oed_sitpepscan_enable( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "type",
				"description": "0-disable 1-typeA 2-typeB",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetDesat",
		"description": "Set the desaturation level for the sitrep scan",
		"example": "entity oed_sitrepscan_setdesat( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "the desat level (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetFalloff",
		"description": "Set the falloff for the sitrep scan",
		"example": "entity oed_sitrepscan_setfalloff( falloff )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "falloff",
				"description": "The falloff (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetLineWidth",
		"description": "Set the line width for the sitrep scan",
		"example": "entity oed_sitrepscan_setlinewidth( linewidth )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "linewidth",
				"description": "The line width (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetOutline",
		"description": "Set the outline level for the sitrep scan",
		"example": "entity oed_sitrepscan_setoutline( outlinelevel )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "outlinelevel",
				"description": "The outline level (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetRadius",
		"description": "Set the radius for the sitrep scan",
		"example": "entity oed_sitrepscan_setradius( radius )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "radius",
				"description": "The radius (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "OED_SitRepScan_SetSolid",
		"description": "Set the solid level for the sitrep scan",
		"example": "entity oed_sitrepscan_setsolid( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "the solid level (float)",
				"mandatory": true
			  },
			  {
				"name": "AlphaType",
				"description": "0-default 1-Alpha ( 0 by default )",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayExtraCamXCam",
		"description": "Plays an XCam on the extra cam associated with the entity starting at the current client time",
		"example": "cameraEnt PlayExtraCamXCam( \"ui_cam_ar_standard\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "xcam name",
				"description": "The name of the xcam asset to play",
				"mandatory": true
			  },
			  {
				"name": "lerp_duration",
				"description": "The duration to lerp the start of the xcam over",
				"mandatory": false
			  },
			  {
				"name": "camera_name",
				"description": "The name of the sub camera from the XCam to play",
				"mandatory": false
			  },
			  {
				"name": "animation_name",
				"description": "The name of the frame (notetrack) to play",
				"mandatory": false
			  },
			  {
				"name": "origin",
				"description": "Base origin for the camera",
				"mandatory": false
			  },
			  {
				"name": "angles",
				"description": "Base angles for the camera",
				"mandatory": false
			  },
			  {
				"name": "target",
				"description": "If this xcam has model translation and rotation data, apply it to this entity.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayFXOnDynEnt",
		"description": "Play this effect and return the internal handle.",
		"example": "handle = PlayFXOnDynEnt( spark, lamp )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "effect id",
				"description": "The effect id returned by loadfx",
				"mandatory": true
			  },
			  {
				"name": "dynent",
				"description": "The dyn entity to play the effect on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayMainCamXCam",
		"description": "Plays an XCam on the main camera associated with the player starting at the current client time",
		"example": "PlayMainCamXCam( localClientNum, \"ui_cam_ar_standard\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  },
			  {
				"name": "xcam name",
				"description": "The name of the xcam asset to play",
				"mandatory": true
			  },
			  {
				"name": "lerp_duration",
				"description": "The duration to lerp the start of the xcam over",
				"mandatory": false
			  },
			  {
				"name": "camera_name",
				"description": "The name of the sub camera from the XCam to play",
				"mandatory": false
			  },
			  {
				"name": "animation_name",
				"description": "The name of the frame (notetrack) to play",
				"mandatory": false
			  },
			  {
				"name": "origin",
				"description": "Base origin for the camera",
				"mandatory": false
			  },
			  {
				"name": "angles",
				"description": "Base angles for the camera",
				"mandatory": false
			  },
			  {
				"name": "target",
				"description": "If this xcam has model translation and rotation data, apply it to this entity.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayRadiantExploder",
		"description": "Play the specified Radiant exploder",
		"example": "PlayRadiantExploder( 0, \"lights_on_exploder\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to play the effect on",
				"mandatory": true
			  },
			  {
				"name": "exploderId",
				"description": "The id of the exploder to be triggered.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayRenderOverrideBundle",
		"description": "Applys a render override bundle to an entitys model ",
		"example": "entity PlayRenderOverrideBundle( \"myBundle\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "PlayTagFXSet",
		"description": "Play a tagfx set on ajn entity. Do not specify loop fx",
		"example": "PlayTagFXSet ( 0, self, smoke )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the fx",
				"mandatory": true
			  },
			  {
				"name": "tagfxset",
				"description": "The string name of the tag fx set",
				"mandatory": true
			  },
			  {
				"name": "entity",
				"description": "The entity to play the effect on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PlayViewmodelFX",
		"description": null,
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local_client_num",
				"description": "The client number",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "The name of the fx",
				"mandatory": true
			  },
			  {
				"name": "tag",
				"description": "The tag to play on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RandomFade",
		"description": "Fade the level randomly",
		"example": "entity randomfade( level )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {
				"name": "level",
				"description": "0 to disable, any other value to enable (float)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RegisterRewindFX",
		"description": "Registers an fx with the killcam rewind system",
		"example": "RegisterRewindFX(local_client_num, \"fxName\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local_client_num",
				"description": "The client number",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "The name of the fx",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RemoveFXExclusionVolume",
		"description": "Removes the given exclusion volume.",
		"example": "RemoveFXExclusionVolume( 0, volumeID )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to remove the volume from.",
				"mandatory": true
			  },
			  {
				"name": "volumeID",
				"description": "The volume to remove.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetAllowXCamRightStickRotation",
		"description": "Prevent or stop preventing right stick rotation on this xcam (the next playmaincamxcam resets this)",
		"example": "SetAllowXCamRightStickRotation( 0, false )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  },
			  {
				"name": "newValue",
				"description": "True to allow, False, to disable right stick rotation",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetArmPulse",
		"description": "Sets arm pulse override values",
		"example": "entity SetArmPulse( 2.0, 4, 3 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetArmPulsePosition",
		"description": "Sets arm pulse override values",
		"example": "entity SetArmPulsePosition( 0.5 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetCameraSpikeCamActive",
		"description": "Sets whether a client's camera-spike cam is active.",
		"example": "SetCameraSpikeCamActive( localClientNum, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the extra cam owner",
				"mandatory": true
			  },
			  {
				"name": "active",
				"description": "0 if inactive, 1 if active",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCameraSpikeCamAngles",
		"description": "Sets the orientation of a client's extra cam.",
		"example": "SetCameraSpikeCamAngles( localClientNum, angles )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the camera-spike cam owner",
				"mandatory": true
			  },
			  {
				"name": "angles",
				"description": "New pitch, yaw, and roll of the camera-spike cam",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCameraSpikeCamEntity",
		"description": "Sets an camera-spike cam entity for the client.",
		"example": "CScr_SetCameraSpikeCamEntity( localClientNum, cameraSpike )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the extra cam owner",
				"mandatory": true
			  },
			  {
				"name": "entity",
				"description": "Camera entity, or undefined",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCameraSpikeCamOrigin",
		"description": "Sets the origin of a client's camera-spike cam",
		"example": "SetCameraSpikeCamOrigin( localClientNum, origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the camera-spike cam owner",
				"mandatory": true
			  },
			  {
				"name": "origin",
				"description": "New origin of the camera-spike cam",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetCameraSpikeCamStatic",
		"description": "Sets whether a client sees static on the camera-spike cam",
		"example": "SetCameraSpikeCamStatic( localClientNum, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Client number of the camera-spike cam owner",
				"mandatory": true
			  },
			  {
				"name": "active",
				"description": "0 if inactive, 1 if active",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetClientVolumetricFog",
		"description": "Set the client volumetric fog properties",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "startDist",
				"description": "The start distance of the volume",
				"mandatory": true
			  },
			  {
				"name": "halfwayDist",
				"description": "The halfway distance of the volume",
				"mandatory": true
			  },
			  {
				"name": "halfwayHeight",
				"description": "The halfway height of the volume",
				"mandatory": true
			  },
			  {
				"name": "baseHeight",
				"description": "The base height of the volume",
				"mandatory": true
			  },
			  {
				"name": "red",
				"description": "The red value",
				"mandatory": true
			  },
			  {
				"name": "green",
				"description": "The green value",
				"mandatory": true
			  },
			  {
				"name": "blue",
				"description": "The blue value",
				"mandatory": true
			  },
			  {
				"name": "fogColorScale",
				"description": "The color scale of the fog",
				"mandatory": true
			  },
			  {
				"name": "sunFogColorR",
				"description": "The sun fog red value",
				"mandatory": false
			  },
			  {
				"name": "sunFogColorG",
				"description": "The sun fog green value",
				"mandatory": false
			  },
			  {
				"name": "sunFogColorB",
				"description": "The sun fog blue value",
				"mandatory": false
			  },
			  {
				"name": "sunFogDirX",
				"description": "The sun direction X value",
				"mandatory": false
			  },
			  {
				"name": "sunFogDirY",
				"description": "The sun direction Y value",
				"mandatory": false
			  },
			  {
				"name": "sunFogDirZ",
				"description": "The sun direction Z value",
				"mandatory": false
			  },
			  {
				"name": "sunFogStartAng",
				"description": "Angle from the sun position where the sun fades in",
				"mandatory": false
			  },
			  {
				"name": "sunFogEndAng",
				"description": "Angle from the sun position where the sun has faded out",
				"mandatory": false
			  },
			  {},
			  {
				"name": "fogMaxOpacity",
				"description": "The maximum opacity of the fog as a value between 0 and 1",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExposureActiveBank",
		"description": "Set exposure volumes active bank bit mask.",
		"example": "SetExposureActiveBank( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "bank mask",
				"description": "The new bank mask",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExposureIgnoreTeleport",
		"description": "Always do fully adaptive exposure and ignore teleports",
		"example": "SetExposureIgnoreTeleport( localClientNum, newVal )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "Enable or disable the exposure always adapt flag",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExposureInstantSnap",
		"description": "snap exposure to base calculated probe value, ignore iris adaption and damping",
		"example": "SetExposureInstantSnap( localClientNum, newVal )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "Enable or disable the exposure snap",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExtraCam",
		"description": "Activates the extra cam and sets the given entity as cam reference.",
		"example": "cameraEnt SetExtraCam( 1, 640, 480 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "camera index",
				"description": "which extra cam references this entity. Valid values are 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "rendered width",
				"description": "Width of the extra cam rendered target. The width will be calculated from the height if width is negative (keeping the aspect ration at 16:9)",
				"mandatory": false
			  },
			  {
				"name": "rendered height",
				"description": "Height of the extra cam rendered target. The height will be calculated from the width if height is negative (keeping the aspect ration at 16:9)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExtraCamFocalLength",
		"description": "Sets the extra cam fov",
		"example": "cameraEnt SetExtraCamFOV( 1, 65 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "camera index",
				"description": "which extra cam references this entity. Valid values are 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "fov",
				"description": "camera fov",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterBitFlag",
		"description": "Set or clear the filter bit flag",
		"example": "SetFilterBitFlag( self.localClientNum, 1, 10 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "bitIndex",
				"description": "Must be between 0 - 31",
				"mandatory": true
			  },
			  {
				"name": "setOrClear",
				"description": "Must be between 0 - 1",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterPassCodeTexture",
		"description": "Sets a code texture for a filter pass - the tetxure has be to created beforehand",
		"example": "SetFilterPassMaterial( self.localClientNum, 1, 12, 0, \"myBundle\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "passIndex",
				"description": "Must be between 0 - 15",
				"mandatory": true
			  },
			  {
				"name": "texture Index",
				"description": "Must be between 0 - 1",
				"mandatory": true
			  },
			  {
				"name": "texture name",
				"description": "has to have been created by captureFrame() before - if empty string sets to null.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterPassConstant",
		"description": "Sets the filter pass constant",
		"example": "SetFilterPassConstant( self.localClientNum, 1, 12, 12, 2.5 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "passIndex",
				"description": "Must be between 0 - 16",
				"mandatory": true
			  },
			  {
				"name": "constantIndex",
				"description": "Must be between 0 - 16",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "The value for the constant",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterPassEnabled",
		"description": "Sets the filter pass enabled or disabled",
		"example": "SetFilterPassEnabled( self.localClientNum, 1, 12, false)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "passIndex",
				"description": "Must be between 0 - 16",
				"mandatory": true
			  },
			  {
				"name": "passEnable",
				"description": "true/false",
				"mandatory": true
			  },
			  {
				"name": "hdrFilter",
				"description": "] true/false - if true the filter is applied to the scene (HDR) otherwise will be applied after the LDT and dof (default false)",
				"mandatory": false
			  },
			  {
				"name": "firstPersonOnly",
				"description": "] true/false - if true the filter is applied to the scene only if you are in or spectating a player in first person",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterPassMaterial",
		"description": "Sets the filter pass material",
		"example": "SetFilterPassMaterial( self.localClientNum, 1, 12, 20 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "passIndex",
				"description": "Must be between 0 - 15",
				"mandatory": true
			  },
			  {
				"name": "materialIndex",
				"description": "Must be between 0 - 63",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFilterPassQuads",
		"description": "Sets the filter pass quads",
		"example": "SetFilterPassQuads( self.localClientNum, 1, 12, 200)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "filterIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "passIndex",
				"description": "Must be between 0 - 16",
				"mandatory": true
			  },
			  {
				"name": "passQuads",
				"description": "Must be between 0 - 2048",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFXIgnorePause",
		"description": "Tells an effect whether or not to respect a paused world state.",
		"example": "SetFXIgnorePause( localClientNum, fxId, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client the effect is playing on.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by playFx",
				"mandatory": true
			  },
			  {
				"name": "ignore pause",
				"description": "Whether or not to respect a paused world state.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFXOutdoor",
		"description": "Flag the FX as one that only plays outdoors.",
		"example": "SetFXOutdoor( fxId )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client the effect is playing on.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by playFx",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetFXTeam",
		"description": "Set the team of the fx either by team or by entity which has a team set.",
		"example": "handle = SetFXTeam(localClientNum, fxHandle, owner)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the fx",
				"mandatory": true
			  },
			  {
				"name": "effect handle ",
				"description": "The handle from the created fx",
				"mandatory": true
			  },
			  {
				"name": "entity or team",
				"description": "The team",
				"mandatory": true
			  },
			  {
				"name": "invert team",
				"description": "Treat the team as the one to show the enemy fx for.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetGenericSceneValue",
		"description": "Sets one of the 16 generic scene vectors used by SW shaders.",
		"example": "SetGenericSceneValue(0, 20)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client number.",
				"mandatory": true
			  },
			  {
				"name": "index",
				"description": "The scene vector index ( 0 - 15 )",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "Some generic float used by SW shaders.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetHotZone",
		"description": "Sets HotZone control values",
		"example": "entity SetHotZone( 100, 1000, 5.0, 3.0, 0.5, 50  )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "SetLitFogBank",
		"description": "Sets which bank to use for all lit fog volumes with matching script id",
		"example": "SetLitFogBank( 0, 1, 5.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  },
			  {
				"name": "scriptid",
				"description": "Volume identifier set in Radiant. (0-255). -1 = all.",
				"mandatory": true
			  },
			  {
				"name": "bank",
				"description": "Bank selection (0-3).",
				"mandatory": true
			  },
			  {
				"name": "time",
				"description": "Time in seconds to make the transition over. -1 to use the 'fogtime' parameter set in the volume.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLutScriptIndex",
		"description": "Set lut index from script.",
		"example": "SetLutScriptIndex( lcn, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "lut index",
				"description": "The lut index",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLutVolumeActiveBank",
		"description": "Set lut volumes active bank bit mask.",
		"example": "SetLutVolumeActiveBank( localClientNum, 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "bank mask",
				"description": "The new bank mask",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetOverlayConstant",
		"description": "Set the overlay constant",
		"example": "SetOverlayConstant( self.lcoalClientNum, 2, 5, 1.4 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "overlayIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "constantIndex",
				"description": "Must be between 0 - 16",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "The value to set",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetOverlayEnabled",
		"description": "Enables or disables the overlay",
		"example": "SetOverlayEnabled( self.localClientNum, 2, false )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "overlayIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "true/false",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetOverlayMaterial",
		"description": "Set the overlay material",
		"example": "SetOverlayMaterial( self.localClientNum, 2, 20, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "overlayIndex",
				"description": "Must be between 0 - 3",
				"mandatory": true
			  },
			  {
				"name": "materialIndex",
				"description": "Must be between 0 - 63",
				"mandatory": true
			  },
			  {
				"name": "sortIndex",
				"description": "Must be between 0 - 2",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetPBGActiveBank",
		"description": "Set PBG bank mask from script.",
		"example": "SetPBGActiveBank( lcn, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "bank mask",
				"description": "The bank bit mask",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetRimIntensity",
		"description": "Global character skin/cloth rim lighting intensity.",
		"example": "SetRimIntensity(0, 20)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client number.",
				"mandatory": true
			  },
			  {
				"name": "rimIntensity",
				"description": "Character skin/cloth rim intensity.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetRippleWave",
		"description": "Trigger vertex ripple wave for material set to use it.",
		"example": "setripplewave( 0, 100.0, 100.0, 200.0, 1.0, 1.0, 0.0, 250.0, 1000.0, 1500.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "client",
				"description": "The local client",
				"mandatory": true
			  },
			  {
				"name": "center xpos",
				"description": "The x coord",
				"mandatory": true
			  },
			  {
				"name": "center ypos",
				"description": "The y coord",
				"mandatory": true
			  },
			  {
				"name": "width",
				"description": "The width of the wave",
				"mandatory": true
			  },
			  {
				"name": "speed scale",
				"description": "The speed modifier",
				"mandatory": true
			  },
			  {
				"name": "amplitude width ratio",
				"description": "The amplitude",
				"mandatory": true
			  },
			  {
				"name": "fade in start",
				"description": "The fade in at start",
				"mandatory": true
			  },
			  {
				"name": "fade in end",
				"description": "The fade in at the end",
				"mandatory": true
			  },
			  {
				"name": "fade out start",
				"description": "The fade out at start",
				"mandatory": true
			  },
			  {
				"name": "fade out end",
				"description": "The fade out at the end",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetServerVolumetricFogDensity",
		"description": "Set the density of server volumetric fog",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client number",
				"mandatory": true
			  },
			  {
				"name": "density",
				"description": "The density to set",
				"mandatory": true
			  },
			  {
				"name": "time",
				"description": "The time to lerp to the new value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetUkkoScriptIndex",
		"description": "Set ukko index from script.",
		"example": "SetUkkoScriptIndex( lcn, 2, 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "the local client",
				"mandatory": true
			  },
			  {
				"name": "ukko index",
				"description": "The ukko index",
				"mandatory": true
			  },
			  {
				"name": "ukko blend",
				"description": "The ukko index blend amount",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StartWaterSheetingFX",
		"description": "Play a fullscreen water effect.",
		"example": "StartWaterSheetingFX(localClientNum, 8)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the fx",
				"mandatory": true
			  },
			  {
				"name": "duration",
				"description": "The number of seconds to play the fx before it stops automatically. Use 0 for infinite time. Defaults to 0.",
				"mandatory": false
			  },
			  {
				"name": "magnitude",
				"description": "default is from a dvar (r_waterSheetingFX_magnitude)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopExtraCamXCam",
		"description": "Stops an XCam on the extra cam associated with the entity",
		"example": "cameraEnt StopExtraCamXCam()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "StopFX",
		"description": "Stops a given fx.",
		"example": "StopFX ( fxId )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client the effect is playing on.",
				"mandatory": true
			  },
			  {
				"name": "effect id",
				"description": "The effect id returned by playFx",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopMainCamXCam",
		"description": "Stops an XCam on the main cam associated with the entity",
		"example": "StopMainCamXCam( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopRadiantExploder",
		"description": "Stop the specified Radiant exploder",
		"example": "StopRadiantExploder( 0, \"lights_on_exploder\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client to play the effect on",
				"mandatory": true
			  },
			  {
				"name": "exploderId",
				"description": "The id of the exploder to be stopped.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StopRenderOverrideBundle",
		"description": "Ends a Render Override Bundle",
		"example": "entity StopRenderOverrideBundle()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "StopWaterSheetingFX",
		"description": "Stop the fullscreen water effect",
		"example": "StopWaterSheetingFX( localClientNum, 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to play the fx",
				"mandatory": true
			  },
			  {
				"name": "duration",
				"description": "The number of seconds it takes the effect to fade. Use 0 for immediate turn off. Defaults to 0.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "SwitchToClientVolumetricFog",
		"description": "Switch to the client volumetric fog",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SwitchToServerVolumetricFog",
		"description": "Switch to the server volumetric fog",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TmodeClearFlag",
		"description": "Clears flag bit for tmode.",
		"example": "entity TmodeClearFlag( 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "TmodeEnable",
		"description": "Enable or disable tactical mode",
		"example": "entity TmodeEnable( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "TmodeSetFlag",
		"description": "Sets flag bit for tmode.",
		"example": "entity TmodeSetFlag( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": []
		  }
		]
	  },
	  {
		"name": "TmodeStatus",
		"description": "returns the status of tmode",
		"example": "status = TmodeStatus( 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client to find the status of",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "umbra_clearpersistenttometrigger",
		"description": "clears the current tome trigger that persisted due to touching a prior tome trigger",
		"example": "umbra_clearpersistenttometrigger( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "Umbra_SetAccurateOcclusionThreshold",
		"description": "Set Umbra Accurate Occlusion Threshold parameter",
		"example": "Umbra_SetAccurateOcclusionThreshold( localClientNum, 2048 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "Umbra_SetDistanceScale",
		"description": "Set Umbra Distance Scale parameter",
		"example": "Umbra_SetDistanceScale( localClientNum, 2.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "Umbra_SetMinimumContributionThreshold",
		"description": "Set Umbra Accurate Occlusion Threshold parameter",
		"example": "Umbra_SetAccurateOcclusionThreshold( localClientNum, 8 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "umbra_settometrigger",
		"description": "Sets current active tome trigger",
		"example": "Umbra_SetTomeTrigger( localClientNum, \"my_really_cool_tome_trigger\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "tometrigger name",
				"description": "name of a tome trigger. Use empty string \"\" to deactivate tome triggers",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "umbra_settometriggeronce",
		"description": "Set the active tome trigger without interferring with any other tome logic.",
		"example": "Umbra_SetTomeTriggerOnce( localClientNum, \"my_really_cool_tome_trigger\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {
				"name": "tometrigger name",
				"description": "name of a tome trigger. Use empty string \"\" to deactivate tome triggers",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "UnhideStaticModel",
		"description": "Unhide a static model",
		"example": "UnhideStaticModel( model )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "smodelIndex",
				"description": "The index of the static model to toggle",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "UnhideVolumeDecal",
		"description": "Unhide a static model",
		"example": "UnhideStaticModel( model )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "volume decal Index",
				"description": "The index of the volume decal to toggle",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VisionSetLastStandLerp",
		"description": "Sets players' last stand vision.  Optionally give a transition time from the current vision.",
		"example": "VisionSetLastStandLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client which will have his vampire vision set changed",
				"mandatory": true
			  },
			  {
				"name": "vision name to",
				"description": "Vision to transition to.",
				"mandatory": true
			  },
			  {
				"name": "vision name from",
				"description": "Vision to transition from.",
				"mandatory": true
			  },
			  {
				"name": "lerp fraction",
				"description": "The lerp fraction to use when transitioning to the new vision set if a transition is possible.  Default is one second.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VisionSetNakedLerp",
		"description": "Sets players' naked vision.  Optionally give a transition time from the current vision.",
		"example": "VisionSetNakedLerp( localClientNum, curr_info.visionset_to, curr_info.visionset_from, state.curr_lerp )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client which will have his vampire vision set changed",
				"mandatory": true
			  },
			  {
				"name": "vision name to",
				"description": "Vision to transition to.",
				"mandatory": true
			  },
			  {
				"name": "vision name from",
				"description": "Vision to transition from.",
				"mandatory": true
			  },
			  {
				"name": "lerp fraction",
				"description": "The lerp fraction to use when transitioning to the new vision set if a transition is possible.  Default is one second.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "WeakPoint_Enable",
		"description": "Enable or disable the weakpoint fx",
		"example": "entity weakpoint_enable( 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": {
			  "name": "entity",
			  "description": null
			},
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "ZombieShooterSpotted",
		"description": "Enables the Zombie Shooter Spotted HUD display",
		"example": "ZombieShooterSpotted(1, 1)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Local client on which to map the material",
				"mandatory": true
			  },
			  {
				"name": "enable",
				"description": "1-enables, 0-disables",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Abs",
		"description": "Returns the absolute value of a float",
		"example": "x = Abs( x )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "value",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AbsAngleClamp180",
		"description": "Returns abs angle value clamped between [0,180].",
		"example": "deltaAngle = AbsAngleClamp180( currentAngle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles",
				"description": "Angle to be clamped",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AbsAngleClamp360",
		"description": "Returns <angle> as a value in the range of 0 and 360 degrees.",
		"example": "new_angle = AbsAngleClamp360( boatAngles[2] )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angle",
				"description": "An angle.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ACos",
		"description": "Returns an angle corresponding to a particular cosine value",
		"example": "upAngle = ACos( distanceratio )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "cos value",
				"description": "A cosine value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AngleClamp180",
		"description": "Returns angle value clamped between [-180,180].",
		"example": "deltaAngle = AngleClamp180( currentAngle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles",
				"description": "Angle to be clamped",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AngleLerp",
		"description": "Returns <angle> lerped angle value.",
		"example": "180 = AngleLerp( 0, 360, 0.5 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "from",
				"description": "An angle.",
				"mandatory": true
			  },
			  {
				"name": "to",
				"description": "An angle.",
				"mandatory": true
			  },
			  {
				"name": "fraction",
				"description": "A float from 0-1.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AnglesToForward",
		"description": "Returns the forward vector corresponding to a set of angles.",
		"example": "forward = AnglesToForward( forward )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles",
				"description": "A set of angles",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AnglesToRight",
		"description": "Returns the right vector corresponding to a set of angles.",
		"example": "right = AnglesToRight(angles)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles",
				"description": "A set of angles",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "AnglesToUp",
		"description": "Returns the up vector corresponding to a set of angles.",
		"example": "up = AnglesToUp(angles)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles",
				"description": "A set of angles",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ASin",
		"description": "Returns an angle corresponding to a particular sin value",
		"example": "upAngle = ASin( upAmount )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "sin value",
				"description": "A sin value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ATan",
		"description": "Returns an angle corresponding to a particular tangential value",
		"example": "upAngle = ATan( height/distance )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "tan value",
				"description": "A tangential value",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Ceil",
		"description": "Returns the ceiling of floating point value <a>. This effectively rounds up Ceil(2.7) == 3, Ceil(3.9) == 4.",
		"example": "rounded_down = Floor( val )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "a",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Closer",
		"description": "Tests which of two points is the closest. Returns true if point a is closer to the reference than point b",
		"example": "if( Closer( center, models[j].origin , models[i].origin ))...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "reference",
				"description": "The base position",
				"mandatory": true
			  },
			  {
				"name": "point a",
				"description": "The first point",
				"mandatory": true
			  },
			  {
				"name": "point b",
				"description": "The second point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CombineAngles",
		"description": "Returns angles b reoriented by angles a.",
		"example": "crateAnglesInWorld = CombineAngles( boatAngles, crateAnglesInBoat )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angles a",
				"description": "Angles representing the orientation in which to place <angles b>",
				"mandatory": true
			  },
			  {
				"name": "angles b",
				"description": "Angles which will be reoriented",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Cos",
		"description": "Returns the cos of an angle",
		"example": "frac = Cos( degrees )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angle",
				"description": "An angle in degrees",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DiffTrack",
		"description": "Returns a lagged value between <from> and <to> based on <rate> and <deltaTime>",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "to",
				"description": "Float, start of the range",
				"mandatory": true
			  },
			  {
				"name": "from",
				"description": "Float, end of the range",
				"mandatory": true
			  },
			  {
				"name": "rate",
				"description": "Floating point",
				"mandatory": true
			  },
			  {
				"name": "deltaTime",
				"description": "Time elapsed",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DiffTrackAngle",
		"description": "Returns a lagged angle between <from> and <to> based on <rate> and <deltaTime>. Properly accounts for wrapping 2pi",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "to",
				"description": "Float, start of the range",
				"mandatory": true
			  },
			  {
				"name": "from",
				"description": "Float, end of the range",
				"mandatory": true
			  },
			  {
				"name": "rate",
				"description": "Floating point",
				"mandatory": true
			  },
			  {
				"name": "deltaTime",
				"description": "Time elapsed",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Distance",
		"description": "Returns the distance between two points",
		"example": "dist = Distance( org, ai[i].origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "point1",
				"description": "The first point",
				"mandatory": true
			  },
			  {
				"name": "point2",
				"description": "The second point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Distance2D",
		"description": "Returns the distance between two points, ignores height difference.",
		"example": "dist = Distance2D( org, ai[i].origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "point1",
				"description": "The first point",
				"mandatory": true
			  },
			  {
				"name": "point2",
				"description": "The second point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Distance2DSquared",
		"description": "Returns the squared distance between two points, ignores height difference.",
		"example": "distsq = Distance2DSquared( org, ai[i].origin )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "point1",
				"description": "The first point",
				"mandatory": true
			  },
			  {
				"name": "point2",
				"description": "The second point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "DistanceSquared",
		"description": "Returns the squared distance between two points - this is cheaper than the actual distance as it doesn't involve a square root",
		"example": "dist2 = DistanceSquared(models[j].origin, center)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "point1",
				"description": "The first point",
				"mandatory": true
			  },
			  {
				"name": "point2",
				"description": "The second point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Float",
		"description": "Casts a string or an integer to a float",
		"example": "x = Float( floatValString )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "value",
				"description": "A string or integer number to cast to a float",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Floor",
		"description": "Returns the floor of floating point value <a>. This effectively rounds down Floor(2.7) == 2, Floor(3.9) == 3.",
		"example": "rounded_down = Floor( val )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "a",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ForwardRotateAroundUpByAngle",
		"description": "returns a vector that is the result of angles1 forward vector rotated around its up by degrees",
		"example": "v=ForwardRotateByAngles( player_angles, frustum_edge_angle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {}
			]
		  }
		]
	  },
	  {
		"name": "GetMinBitCountForNum",
		"description": "Returns the minimum number of bits needed to express the provided integer",
		"example": "GetMinBitCountForNum( 15 ) returns 4",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "uint",
				"description": "The integer a minimum bit count is needed for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Int",
		"description": "Casts a floating point number or a string to an integer",
		"example": "x = Int( self.HUDHealthHeight )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "value",
				"description": "A string or floating point number to cast to an integer",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Length",
		"description": "Returns the length of the given vector",
		"example": "dist = Length(models[j].origin - center)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector",
				"description": "A vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LengthSquared",
		"description": "Returns the squared vector length for the given vector - this is cheaper than the actual vector length as it doesn't involve a square root",
		"example": "dist2 = LengthSquared(models[j].origin - center)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector",
				"description": "A vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LerpFloat",
		"description": "Returns a lerped value between <from> and <to> based on <time>",
		"example": "val = LerpFloat( 0, 10, 0.5);\t// would return 5.0",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "from",
				"description": "Floating point value, start of the range",
				"mandatory": true
			  },
			  {
				"name": "to",
				"description": "Floating point value, end of the range",
				"mandatory": true
			  },
			  {
				"name": "time",
				"description": "Floating point value in the range of 0 - 1",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LerpVector",
		"description": "Returns a lerped vector value between <from> and <to> based on <time>",
		"example": "val = LerpVector( (0,0,0), (5,5,5), 0.5);\t// would return (2.5, 2.5, 2.5)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "from",
				"description": "Vector, start of the range",
				"mandatory": true
			  },
			  {
				"name": "to",
				"description": "Vector, end of the range",
				"mandatory": true
			  },
			  {
				"name": "time",
				"description": "Floating point value in the range of 0 - 1",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Log",
		"description": "Returns the logarithm of a number to base 10",
		"example": "y = Log( x )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {}
			]
		  }
		]
	  },
	  {
		"name": "MapFloat",
		"description": "Returns a lerped value between <from> and <to> based on <time>. <time> is a value between <timeMin> and <timeMax>.",
		"example": "val = MapFloat( 1, 2, 0, 10, 1.5); // would return 5.0",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "timeMin",
				"description": "Floating point value, min time value",
				"mandatory": true
			  },
			  {
				"name": "timeMax",
				"description": "Floating point value, max time value",
				"mandatory": true
			  },
			  {
				"name": "from",
				"description": "Floating point value, start of the result range",
				"mandatory": true
			  },
			  {
				"name": "to",
				"description": "Floating point value, end of the result range",
				"mandatory": true
			  },
			  {
				"name": "time",
				"description": "Floating point value in the range from <timeMin> to <timeMax>",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Max",
		"description": "Returns whichever of <a> or <b> is larger.",
		"example": "largest = Max( val1, val2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "a",
				"description": "A float or integer value.",
				"mandatory": true
			  },
			  {
				"name": "b",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Min",
		"description": "Returns whichever of <a> or <b> is smallest.",
		"example": "smallest = Min( val1, val2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "a",
				"description": "A float or integer value.",
				"mandatory": true
			  },
			  {
				"name": "b",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PackRgba",
		"description": "Packs rgba into a single int.",
		"example": "Byte4PackRgba( 1.0, 1.0, 1.0, 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "red",
				"description": "as a float 0.0-1.0",
				"mandatory": true
			  },
			  {
				"name": "green",
				"description": "as a float 0.0-1.0",
				"mandatory": true
			  },
			  {
				"name": "blue",
				"description": "as a float 0.0-1.0",
				"mandatory": true
			  },
			  {
				"name": "alpha",
				"description": "as a float 0.0-1.0",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PointOnSegmentNearestToPoint",
		"description": "Given a line segment and a point P, this returns the point on the segment that is closest to P.",
		"example": "nearestPoint = PointOnSegmentNearestToPoint( A, B, P )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "SegmentA",
				"description": "One endpoint of the line segment",
				"mandatory": true
			  },
			  {
				"name": "SegmentB",
				"description": "Other endpoint of the line segment",
				"mandatory": true
			  },
			  {
				"name": "P",
				"description": "The point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Pow",
		"description": "Return the value of base raised to exp power.",
		"example": "c = pow( 2, 4 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "exp",
				"description": "A float or integer value, <b>.\"",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Project2Dto3D",
		"description": "returns a world coordinate that projects to the given 2d coordinate ((-1,1),(-1,1))",
		"example": "v=Project2DTo3D( 0, -1, -1, 5)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "clientnum",
				"description": "clientnumber - needed for viewport selection.",
				"mandatory": true
			  },
			  {
				"name": "x",
				"description": "screen space x coord (-1,1)",
				"mandatory": true
			  },
			  {
				"name": "y",
				"description": "screen space y coord (-1,1)",
				"mandatory": true
			  },
			  {
				"name": "depth",
				"description": "depth to assume near clip is at (at this depth the screen will be edge to edge)",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Project3Dto2D",
		"description": "returns a screen coordinate vector (virtual UI coord) of a 3d coordinate ",
		"example": "hudPosition = Project3DTo2D( 0, target_pos )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "clientnum",
				"description": "client number - needed for viewport selection.",
				"mandatory": true
			  },
			  {
				"name": "world_coordinate",
				"description": "world space vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RotatePoint",
		"description": "Returns <angle> lerped angle value.",
		"example": "rotatedPoint = RotatePoint(point, angle )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "point",
				"description": "A point.",
				"mandatory": true
			  },
			  {
				"name": "angles",
				"description": "An angle.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "RotatePointAroundAxis",
		"description": "returns a vector that is the result of point rotated around the axis vector by num degrees",
		"example": "v = RotatePointAroundAxis( point, up, degrees )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {},
			  {},
			  {}
			]
		  }
		]
	  },
	  {
		"name": "Sin",
		"description": "Returns the sin of an angle",
		"example": "frac = Sin( degrees )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angle",
				"description": "An angle in degrees",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Sqrt",
		"description": "Returns the square-root of floating point value <a>.",
		"example": "c = sqrt( (a*a) + (b*b) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "a",
				"description": "A float or integer value.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Tan",
		"description": "Returns the tan of an angle",
		"example": "frac = Tan( degrees )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "angle",
				"description": "An angle in degrees",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorCross",
		"description": "Returns the cross product of two vectors",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector a",
				"description": "The first vector",
				"mandatory": true
			  },
			  {
				"name": "vector b",
				"description": "The second vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorDot",
		"description": "Returns the dot product of two vectors",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector a",
				"description": "The first vector",
				"mandatory": true
			  },
			  {
				"name": "vector b",
				"description": "The second vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorFromLineToPoint",
		"description": "Given a line and a point P, this returns a vector perpendicular to the line and pointing from the line to P.",
		"example": "myvector = VectorFromLineToPoint( A, B, P )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "SegmentA",
				"description": "One point on the line",
				"mandatory": true
			  },
			  {
				"name": "SegmentB",
				"description": "Another point on the line",
				"mandatory": true
			  },
			  {
				"name": "P",
				"description": "The point",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorLerp",
		"description": "Linear interpolates between two vectors.",
		"example": "color = VectorLerp(oldColor, newColor, timeElapsed / timeTotal)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "from",
				"description": "The vector whose value is used when fraction is 0",
				"mandatory": true
			  },
			  {
				"name": "to",
				"description": "The vector whose value is used when fraction is 1",
				"mandatory": true
			  },
			  {
				"name": "fraction",
				"description": "The fraction of the way between vectors.  Values less than 0 or greater than 1 do linear extrapolation.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorNormalize",
		"description": "Returns a normalized copy of this vector",
		"example": "difference = VectorNormalize(end - start)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector",
				"description": "The vector to normalize",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectorProjection",
		"description": "Returns the vector projection of vector a onto vector b",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector a",
				"description": "The first vector",
				"mandatory": true
			  },
			  {
				"name": "vector b",
				"description": "The second vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "VectortoAngles",
		"description": "Returns a set of angles corresponding to the given vector.",
		"example": "angles = VectortoAngles(end - start)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "vector",
				"description": "The vector to convert to angles",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ViewAspect",
		"description": "returns the horizontal screen aspect ",
		"example": "viewAspect = ViewAspect( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "clientnum",
				"description": "client number - needed for viewport selection.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CloseLUIMenu",
		"description": "Close the LUI menu specified.",
		"example": "CloseLUIMenu( localClientNum, menuIndex )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "menuIndex",
				"description": "Menu ID received from CreateLUIMenu.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CreateLUIMenu",
		"description": "Creates a LUI menu to be opened later with OpenLUIMenu.",
		"example": "CreateLUIMenu( localClientNum, \"ScriptDebugMenu\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "Name of the menu to create.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "CreateUIModel",
		"description": "Creates and returns a UIModel from a parent model.",
		"example": "CreateUIModel( gameScoreModel, \"enZemeyScore\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "parentModel",
				"description": "The parent model of the model to retrieve.",
				"mandatory": true
			  },
			  {
				"name": "newPathName",
				"description": "The name/path of the new model to create.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "FreeUIModel",
		"description": "Frees a UIModel.",
		"example": "FreeUIModel( gameScoreModel )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "modelToFree",
				"description": "The model to free.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetGlobalUIModel",
		"description": "Returns the gloabl UIModel.",
		"example": "GetGlobalModel()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetLUIMenu",
		"description": "Gets the first instance found of a given menu name active for the given client (undefined if not found)",
		"example": "menuIndex = GetLUIMenu( localClientNum, \"HudElementImage\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "menuName",
				"description": "Menu name",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLUIMenuData",
		"description": "Gets data from a LUI menu.",
		"example": "modelValue = GetLUIMenuData( localClientNum, menuIndex, \"title\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "menuIndex",
				"description": "Menu ID received from CreateLUIMenu.",
				"mandatory": true
			  },
			  {
				"name": "menuDataName",
				"description": "Menu Data Name linked to the UIModel.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetUIModel",
		"description": "Returns a UIModel from the parent model passed in and the name of the model to retrieve.",
		"example": "GetUIModel( gameScoreModel, \"enemeyScore\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "parentModel",
				"description": "The parent model of the model to retrieve.",
				"mandatory": true
			  },
			  {
				"name": "lookupModelName",
				"description": "The name of the model to retrieve.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetUIModelForController",
		"description": "Returns the UIModel from the controller root.",
		"example": "GetUIModelForController( localClientNum )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetUIModelValue",
		"description": "Returns the value of the UIModel passed in.",
		"example": "GetUIModelValue( gameScoreModel )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "model",
				"description": "Model of the value to retrieve.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsLuiEnabled",
		"description": "true if lui system has the input focus",
		"example": "if( IsLuiEnabled() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "LuiDisable",
		"description": "user input is removed from lui system",
		"example": "LuiDisable( 0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localclientnum",
				"description": "The local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LuiEnable",
		"description": "user input is handed to lui system until returned",
		"example": "LuiEnable(\"overlay\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localclientnum",
				"description": "The local client",
				"mandatory": true
			  },
			  {
				"name": "menuname",
				"description": "The name of the menu to enable",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "LuiLoad",
		"description": "Loads a lui file, making the menus available for addition",
		"example": "LuiLoad(\"overlay\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "OpenLUIMenu",
		"description": "Opens a loaded LUI menu.",
		"example": "OpenLUIMenu( localClientNum, menuIndex )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "menuIndex",
				"description": "Menu ID received from CreateLUIMenu.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "OpenLUIPopup",
		"description": "Opens a loaded LUI menu.",
		"example": "OpenLUIPopup( localClientNum, \"SomePopup\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "name",
				"description": "Name of the popup menu to open.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "PopulateScriptDebugMenu",
		"description": "Sets a UIModel from the model being passed in.",
		"example": "PopulateScriptDebugMenu( localClientNum, menu_items_array )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "array",
				"description": "Array of menu item names for the debug menu.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetExtraCamRenderReady",
		"description": "Sets an extra cam render job to start processing",
		"example": "StartExtraCamRender( 2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "jobIdx",
				"description": "Extra Cam Render job index.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetLUIMenuData",
		"description": "Set data for LUI menu.",
		"example": "SetLUIMenuData( localClientNum, menuIndex, \"title\", \"Some Title\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "Number of the local client on the machine.",
				"mandatory": true
			  },
			  {
				"name": "menuIndex",
				"description": "Menu ID received from CreateLUIMenu.",
				"mandatory": true
			  },
			  {
				"name": "menuDataName",
				"description": "Menu Data Name linked to the UIModel.",
				"mandatory": true
			  },
			  {
				"name": "menuDataValue",
				"description": "Value for that piece of menu data.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SetUIModelValue",
		"description": "Sets a UIModel from the model being passed in.",
		"example": "SetUIModelValue( gameScoreModel )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "model",
				"description": "Model of the value to set.",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "Value to set.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "array",
		"description": "create an array",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "args",
				"description": "one or more args to add to the array",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayCombine",
		"description": "combine two arrays into and returns one new array",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array1",
				"description": "array to operate on",
				"mandatory": true
			  },
			  {
				"name": "array2",
				"description": "array to operate on",
				"mandatory": true
			  },
			  {
				"name": "allowdupes",
				"description": "if true then allow duplicate entries, otherwise prune them out when combining",
				"mandatory": true
			  },
			  {
				"name": "preserve_keys",
				"description": "if true then preserve the keys (only for string keys) otherwise renumber when combining",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayCopy",
		"description": "returns a copy of an array",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array1",
				"description": "array to operate on",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayGetClosest",
		"description": "Returns the entity/vector that is closest to the <origin> from the <array>.",
		"example": "ent = ArrayGetClosest( player.origin, a_enemies )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "origin",
				"description": "The origin to get closest from",
				"mandatory": true
			  },
			  {
				"name": "array",
				"description": "The array to search in",
				"mandatory": true
			  },
			  {
				"name": "dist",
				"description": "The minimum distance to check when finding closest (has to be positive)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayGetFarthest",
		"description": "Returns the entity/vector that is farthest to the <origin> from the <array>.",
		"example": "ent = ArrayGetFarthest( player.origin, a_enemies )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "origin",
				"description": "The origin to get farthest from",
				"mandatory": true
			  },
			  {
				"name": "array",
				"description": "The array to search in",
				"mandatory": true
			  },
			  {
				"name": "dist",
				"description": "The maximum distance when finding farthest (has to be positive)",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayInsert",
		"description": "insert a value into an array at a given index",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "array to operate on",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "value to insert",
				"mandatory": true
			  },
			  {
				"name": "index",
				"description": "index at which to insert the value (must be an integer) - moves existing entries as required",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayIntersect",
		"description": "Returns an array of values that are present in both arrays.",
		"example": "newArray = ArrayIntersect( array1, array2 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array1",
				"description": "An Array",
				"mandatory": true
			  },
			  {
				"name": "array2",
				"description": "An Array",
				"mandatory": true
			  },
			  {
				"name": "matchKeys",
				"description": "Optionally returns an array of matching key/value pairs from the two input arrays (preserving the keys).",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayRemoveIndex",
		"description": "Remove a value from an array at a given index",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "array to operate on",
				"mandatory": true
			  },
			  {
				"name": "index",
				"description": "index of value to remove",
				"mandatory": true
			  },
			  {
				"name": "preserve_keys",
				"description": "defaults to false, if true then it preserves the keys - otherwise creates integer keys",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ArrayRemoveValue",
		"description": "Remove a value from an array (may affect multiple indexes)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "array to operate on",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "value to remove (may be undefined)",
				"mandatory": true
			  },
			  {
				"name": "preserve_keys",
				"description": "defaults to false, if true then it preserves the keys - otherwise creates integer keys",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "Assert",
		"description": "Assert that the given statement is correct. The function will throw a script error if this is false.",
		"example": "Assert( enemyInSight == true )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "value",
				"description": "statement that is asserted to be correct",
				"mandatory": true
			  },
			  {
				"name": "desc",
				"description": "string describing the nature of the assert",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "AssertMsg",
		"description": "Throws a script error with the given message.",
		"example": "AssertMsg( \"Unhandled enemy type.\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "message",
				"description": "error message",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "associativeArray",
		"description": "creates an associativeArray",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "key_i",
				"description": "the string key for the next value",
				"mandatory": false
			  },
			  {
				"name": "value_i",
				"description": "the value for the previous key",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "ClientHasSnapshot",
		"description": "Returns true if client has recieved a snapshot from the server",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "local client",
				"description": "the desired Local Client number.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ErrorMsg",
		"description": "Throws a non-fatal script error with the given message.",
		"example": "ErrorMsg( \"Unhandled enemy type.\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "message",
				"description": "error message",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetArrayKeys",
		"description": "Returns an array consisting of the keys of the input array.",
		"example": "result = GetArrayKeys( array )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "Input array",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetAttachmentTableIndex",
		"description": "Returns the attachment table index for the attachment name",
		"example": "attachmentIndex = GetAttachmentTableIndex( \"reflex\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "attachmentRef",
				"description": "Attachment Reference",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetDvarFloat",
		"description": "Gets the value of a dvar.",
		"example": "GetDvarFloat( \"r_eyesAdjust\", 1.0 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "dvar",
				"description": "The dvar name as a string or hash.",
				"mandatory": true
			  },
			  {
				"name": "default_value",
				"description": "The value to be returned if the dvar doesn't exist, must be an float.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetDvarInt",
		"description": "Gets the value of a dvar.",
		"example": "GetDvarInt( \"r_eyesAdjust\", 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "dvar",
				"description": "The dvar name as a string or hash.",
				"mandatory": true
			  },
			  {
				"name": "default_value",
				"description": "The value to be returned if the dvar doesn't exist, must be an integer.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetDvarString",
		"description": "Gets the value of a dvar.",
		"example": "GetDvarString( \"r_eyesAdjust\", \"yes\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "dvar",
				"description": "The dvar name as a string or hash.",
				"mandatory": true
			  },
			  {
				"name": "default_value",
				"description": "The value to be returned if the dvar doesn't exist, must be a string.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetDvarVector",
		"description": "Gets the value of a dvar.",
		"example": "GetDvarVector( \"r_eyesAdjust\", (1,0,0) )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "dvar",
				"description": "The dvar name as a string or hash.",
				"mandatory": true
			  },
			  {
				"name": "default_value",
				"description": "The value to be returned if the dvar doesn't exist, must be an vector.",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetFirstArrayKey",
		"description": "Returns the first key of the input array.",
		"example": "key = GetFirstArrayKey( array )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "Input array",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetItemIndexFromRef",
		"description": "Returns the item index for the specified item reference",
		"example": "itemIndex = GetItemIndexFromRef( <itemRef> )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "itemRef",
				"description": "Item Reference",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetLastArrayKey",
		"description": "Returns the last key of the input array.",
		"example": "key = GetLastArrayKey( array )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "Input array",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetMapCenter",
		"description": "Returns the map center",
		"example": "center = GetMapCenter()",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "GetNextArrayKey",
		"description": "Returns the next key of the input array, after the specified key.",
		"example": "key = GetNextArrayKey( array, key )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "Input array",
				"mandatory": true
			  },
			  {
				"name": "key",
				"description": "The given key",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetPrevArrayKey",
		"description": "Returns the prev key of the input array, before the specified key.",
		"example": "key = GetPrevArrayKey( array, key )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "Input array",
				"mandatory": true
			  },
			  {
				"name": "key",
				"description": "The given key",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetServerTime",
		"description": "Returns the time according to the server",
		"example": "GetServerTime(localClientNum)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "localClientNum",
				"description": "The local client",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetSubStr",
		"description": "Returns the substring of characters >= <start index> and < <end index>. <end index> is optional.",
		"example": "name = getSubStr( playerwarp_string, 8 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "The input string",
				"mandatory": true
			  },
			  {
				"name": "start index",
				"description": "The start index of the substring",
				"mandatory": true
			  },
			  {
				"name": "end index",
				"description": "The end index of the substring",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "GetSystemTime",
		"description": "Returns the time of the system in a vector where the 0 index is hours (in 24hr time), 1 is minutes, and 2 is seconds",
		"example": "GetSystemTime(1)",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "ignore timezone",
				"description": "Set to non-zero to ignore the timezone information",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsArray",
		"description": "Checks whether this entity/variable is an array",
		"example": "if ( isarray ( gun_owner )) ... ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a array",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsClass",
		"description": "Checks whether this entity/variable is a class object",
		"example": "if ( isclass(self)) ... ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a class",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsFloat",
		"description": "Checks whether this entity/variable is a float",
		"example": "if ( IsFloat( gun_owner ) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a float",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsFunctionPtr",
		"description": "Checks whether given variable is of type Function Pointer in script, useful to differentiate between Var and FuncPtr in Script.",
		"example": "if ( IsFunctionPtr( myFuncPtr ) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable to test",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsInArray",
		"description": "searches an array to determine if a given value is present in that array",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "array",
				"description": "array to search",
				"mandatory": true
			  },
			  {
				"name": "value",
				"description": "value to search for",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsInt",
		"description": "Checks whether this entity/variable is an int",
		"example": "if ( IsInt( gun_owner ) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be an int",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsMatureContentEnabled",
		"description": "Returns true if mature content is enabled",
		"example": "if( IsMatureContentEnabled() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsShowBloodEnabled",
		"description": "Returns true if blood is enabled",
		"example": "if( IsShowBloodEnabled() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsShowGibsEnabled",
		"description": "Returns true if gibs is enabled",
		"example": "if( IsShowGibsEnabled() )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "IsString",
		"description": "Checks whether this entity/variable is a string",
		"example": "if ( isstring ( gun_owner )) ... ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a string",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsStruct",
		"description": "Checks whether this variable is a struct object",
		"example": "if ( isstruct(self)) ... ",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a struct",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsSubStr",
		"description": "Returns true/false if <substring> is a substring of <string>. Case sensitive.",
		"example": "has_str = IsSubStr( \"my_string\", \"str\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "istring",
		"description": "Casts a string to an istring",
		"example": "x = istring( String )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "value",
				"description": "A string to cast to an istring",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsVec",
		"description": "Checks whether this entity/variable is a vector",
		"example": "if ( IsVec( gun_owner ) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "variable",
				"description": "variable that may or may not be a vector",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "IsWeapon",
		"description": "Checks whether this is a weapon object",
		"example": "if ( IsWeapon( current_weapon ) ) ...",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weapon_object",
				"description": "An parameter that may be a weapon object",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "MakeLocalizedString",
		"description": "Make a localized string of the given string",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "The string to translate",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "SplitArgs",
		"description": "Splits a space seperated string, returning an array of each word in the string.",
		"example": "args = SplitArgs(\"First second third fourth\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "arg string",
				"description": "space seperated string.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "sprintf",
		"description": "Replaces field specifiers in a string with values passed in, returns result string format specifiers take the form of {[n]} in the source string where [n] indicates which value to print, e.g. 0 is the first user arg",
		"example": "sprintf(\"{0} is the first string\",\"first\")",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "The string to translate",
				"mandatory": true
			  },
			  {
				"name": "args",
				"description": "zero or more arguments",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrEndsWith",
		"description": "Returns true/false if <string> ends with <substring>. Case sensitive.",
		"example": "ends_with = StrEndsWith( \"my_string\", \"_string\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "String to search",
				"mandatory": true
			  },
			  {
				"name": "substring",
				"description": "Substring to search with.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrIsFloat",
		"description": "Check if a string is a float.",
		"example": "StrIsFloat( \"1.2\" ); // true",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": ": The string to check.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrIsInt",
		"description": "Check if a string is an int.",
		"example": "StrIsInt( \"1\" ); // true",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": ": The string to check.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrIsNumber",
		"description": "Check if a string is a number.",
		"example": "StrIsNumber( \"1.2\" ); // true",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": ": The string to check.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrStartsWith",
		"description": "Returns true/false if <string> starts with <substring>. Case sensitive.",
		"example": "starts_with = StrStartsWith( \"my_string\", \"my_\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "String to search",
				"mandatory": true
			  },
			  {
				"name": "substring",
				"description": "Substring to search with.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrStrip",
		"description": "Strip whitespace from right and left side of string.",
		"example": "StrStrip( \"    hq_cleared   \" ); // 'hq_cleared'",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": ": The string to strip.",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrTok",
		"description": "Tokenizes <string> by the delimiters <delim>. Returns the array of string tokens.",
		"example": "my_string_array = StrTok( \"my_string; my_string_2\", \"; \" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "The input string",
				"mandatory": true
			  },
			  {
				"name": "delim",
				"description": "The delimiter to tokenize by",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "StrTok2",
		"description": "Tokenizes <string> by a single delimiter string.  doesn't treat the delimiter string as a series of characters, but as a string",
		"example": "my_string_array = StrTok2( \"my_string foo; my_string_2\", \"foo; \" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "The input string",
				"mandatory": true
			  },
			  {
				"name": "delim",
				"description": "The delimiter to tokenize by",
				"mandatory": true
			  },
			  {
				"name": "case_sensitive",
				"description": "true if test is case sensitive",
				"mandatory": false
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookup",
		"description": "look up a row in a table and pull out a particular column from that row",
		"example": "TableLookup( \"mp/statstable.csv\", 0, \"INDEX_KILLS\", 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  },
			  {
				"name": "search column num",
				"description": "The column number of the stats table to search through",
				"mandatory": true
			  },
			  {
				"name": "search value",
				"description": "The value to use when searching the <search column num>",
				"mandatory": true
			  },
			  {
				"name": "return value column num",
				"description": "The column number value to return after we find the correct row",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupColumnCount",
		"description": "look up the number of columns in a table",
		"example": "TableLookup( \"mp/statstable.csv\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupColumnForRow",
		"description": "look up a particular row and column in a table",
		"example": "TableLookupColumnForRow( \"gamedata/tables/mp/exampleStringTable.csv\", 101, 7 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  },
			  {
				"name": "search row num",
				"description": "The row number of the string table to search through",
				"mandatory": true
			  },
			  {
				"name": "search column num",
				"description": "The column number of the string table to search through",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupFindCoreAsset",
		"description": "Find core asset index for a stringtable",
		"example": "TableLookupRowNum( \"mp/statstable.csv\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupIString",
		"description": "look up a row in a table and pull out a particular column from that row",
		"example": "TableLookupIString( \"mp/statstable.csv\", 0, \"INDEX_KILLS\", 1 )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  },
			  {
				"name": "search column num",
				"description": "The column number of the stats table to search through",
				"mandatory": true
			  },
			  {
				"name": "search value",
				"description": "The value to use when searching the <search column num>",
				"mandatory": true
			  },
			  {
				"name": "return value column num",
				"description": "The column number value to return after we find the correct row",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupRow",
		"description": "Return an array of strings for the columns in that row",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  },
			  {
				"name": "row num",
				"description": "The row num of the row in table to return",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupRowCount",
		"description": "look up the number of rows in a table",
		"example": "TableLookup( \"mp/statstable.csv\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "TableLookupRowNum",
		"description": "look up a row number in a table",
		"example": "TableLookupRowNum( \"mp/statstable.csv\", 0, \"INDEX_KILLS\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "filename",
				"description": "The table to look up",
				"mandatory": true
			  },
			  {
				"name": "search column num",
				"description": "The column number of the stats table to search through",
				"mandatory": true
			  },
			  {
				"name": "search value",
				"description": "The value to use when searching the <search column num>",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "Throw",
		"description": "force a script exception (from a builtin call)",
		"example": "throw( )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": []
		  }
		]
	  },
	  {
		"name": "ToLower",
		"description": "Converts <string> to a lower case string which is returned.",
		"example": "my_string = ToLower( \"MY_STRING\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "(string) Base string",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "ToUpper",
		"description": "Converts <string> to a upper case string which is returned.",
		"example": "my_string = ToUpper( \"lower\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "string",
				"description": "(string) Base string",
				"mandatory": true
			  }
			]
		  }
		]
	  },
	  {
		"name": "EnumerateWeapons",
		"description": "Return an array of weapon names for the weapons of weapon type in fastfile",
		"example": "a_weapons = EnumerateWeapons( \"weapon\" )",
		"flags": [
		  "autogenerated"
		],
		"overloads": [
		  {
			"calledOn": null,
			"parameters": [
			  {
				"name": "weapon type",
				"description": "The type of weapon to return(weapon or weaponfull)",
				"mandatory": true
			  }
			]
		  }
		]
	  }
	]
  }