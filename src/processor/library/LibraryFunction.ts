/**
	GSCode Language Extension for Visual Studio Code
    Copyright (C) 2022 Blakintosh

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import { MarkdownString } from "vscode";
import { FunctionFlag } from "../util/GSCUtil";
import { LibraryFunctionParameter } from "./LibraryFunctionParameter";

/**
 * This class is used for the storage of functions built into GSC/CSC.
 * E.g. iprintlnbold, etc.
 */
export class LibraryFunction {
	// Function data
	readonly name: string;
	readonly description: string;
	// Function args
	readonly calledOn: string | null;
	readonly parameters: Array<LibraryFunctionParameter>;
	// Provider for which script type (could be both)?
	readonly isGSC: boolean;
	readonly isCSC: boolean;
	// Example, might go unused
	readonly example: string | undefined;
	// Whether it was autogenerated
	readonly flag: FunctionFlag; // Treyarch's GSC library has some inaccuracies. Set to none if fixed, broken if function doesn't work

	constructor(name: string, description: string, calledOn: string | null, parameters: Array<LibraryFunctionParameter>, isGSC: boolean, isCSC: boolean, example: undefined | string, flag=FunctionFlag.None) {
		this.name = name;
		this.description = description;
		this.calledOn = calledOn;
		this.parameters = parameters;
		this.isGSC = isGSC;
		this.isCSC = isCSC;
		this.example = example;
		this.flag = flag;
	}

	toDocString(): MarkdownString {
		let functionDoc = `${this.description}\r\n\r\n`;

		if(this.calledOn !== null) {
			functionDoc += `Called on: \`<${this.calledOn}>\` \r\n\r\n`;
		}

		if(this.parameters.length > 0) {
			functionDoc += `Parameters:\r\n`;
		}

		for(let i = 0; i < this.parameters.length; i++) {
			let parameter = this.parameters[i];

			let argName = (parameter.mandatory ? `<${parameter.name}>` : `[${parameter.name}]`);
			
			let final = `* \`${argName}\` - ${parameter.description}\r\n`;
			functionDoc += final;
		}

		switch(this.flag) {
			case FunctionFlag.AutoGenerated:
				functionDoc += "\r\n_This documentation was generated from Treyarch's API, which may contain errors._";
				break;
			case FunctionFlag.Broken:
				functionDoc += "\r\n**This function does not work.**";
				break;
			case FunctionFlag.Deprecated:
				functionDoc += "\r\n_This function has been deprecated._";
				break;
			case FunctionFlag.Useless:
				functionDoc += "\r\n_This function is useless to modders._";
				break;
		}

		return new MarkdownString(functionDoc);
	}
}