import { MarkdownString } from "vscode";
import { LibraryFunctionParameter } from "./LibraryFunctionParameter";

/**
 * This class is used for the storage of functions built into GSC/CSC.
 * E.g. iprintlnbold, etc.
 */
export class LibraryFunction {
	// Function data
	readonly name: string;
	readonly description: string;
	// Function args
	readonly calledOn: string | null;
	readonly parameters: Array<LibraryFunctionParameter>;
	// Provider for which script type (could be both)?
	readonly isGSC: boolean;
	readonly isCSC: boolean;
	// Example, might go unused
	readonly example: string | undefined;
	// Whether it was autogenerated
	readonly autogenerated: boolean; // Treyarch's GSC library has some inaccuracies. Set to false if manually verified or fixed

	constructor(name: string, description: string, calledOn: string | null, parameters: Array<LibraryFunctionParameter>, isGSC: boolean, isCSC: boolean, example: undefined | string, autogenerated=false) {
		this.name = name;
		this.description = description;
		this.calledOn = calledOn;
		this.parameters = parameters;
		this.isGSC = isGSC;
		this.isCSC = isCSC;
		this.example = example;
		this.autogenerated = autogenerated;
	}

	toDocString(): MarkdownString {
		let functionDoc = `${this.description}\r\n\r\n`;

		if(this.calledOn !== null) {
			functionDoc += `Called on: \`<${this.calledOn}>\` \r\n\r\n`;
		}

		if(this.parameters.length > 0) {
			functionDoc += `Parameters:\r\n`;
		}

		for(let i = 0; i < this.parameters.length; i++) {
			let parameter = this.parameters[i];

			let argName = (parameter.mandatory ? `<${parameter.name}>` : `[${parameter.name}]`);
			
			let final = `* \`${argName}\` - ${parameter.description}\r\n`;
			functionDoc += final;
		}

		if(this.autogenerated) {
			functionDoc += "\r\n_This documentation was generated from Treyarch's API, which may contain errors._";
		}

		return new MarkdownString(functionDoc);
	}
}