{
    "scopeName": "source.gsc",
    "comment": "GSC grammar: based on https://gist.github.com/edfuh/2041042",
    "fileTypes": [
        "gsc"
    ],
    "foldingStartMarker": "^.*\bfunction\\s*(\\w+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
    "foldingStopMarker": "^\\s*\\}",
    "patterns": [
        {	
            "name": "meta.function.gsc",
			"comment": "match regular function like: function myFunc(arg) { É }",
			"match": "\\b(function)(\\s[a-zA-Z_$]\\w*)?\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))",
			"captures": {
                "1": { "name": "storage.type.function.gsc" },
                "2": {
                    "patterns": [
                        {
                            "name": "storage.modifier.function.gsc",
                            "match": "\\b(private|autoexec)\\b"
                        }
                    ]
                },
                "3": { "name": "entity.name.function.gsc" },
                "4": { "name": "punctuation.definition.parameters.begin.gsc" },
                "5": { 
                    "name": "variable.parameter.function.gsc",
                    "patterns": [
                        {
                            "include": "#function-parameter-defaults"
                        },
                        {
                            "include": "#expression"
                        },
                        {
                            "include": "#function-vararg"
                        },
                        {
                            "name": "keyword.operator.parameter-comma.gsc",
                            "match": ","
                        }
                    ]
                },
                "6": { "name": "punctuation.definition.parameters.end.gsc" }
            }
        },
        {	
            "name": "meta.class.gsc",
			"comment": "match classes like: class Ham, class Cheddar : Cheese { É }",
			"match": "\\b(class)\\s([a-zA-Z_$]\\w*)(\\s:\\s+([a-zA-Z_$]\\w*))?",
			"captures": {
                "1": { "name": "storage.type.class.gsc" },
                "2": { "name": "entity.name.class.gsc" },
                "4": { "name": "entity.other.inherited-class.gsc" }
            }
        },
        {	
            "name": "meta.class.structor.gsc",
			"comment": "con/de structor()",
			"match": "\\b(constructor|destructor)\\s*(\\()(.*?)(\\))",
			"captures": {
                "1": { "name": "storage.type.function.gsc" },
                "2": { "name": "punctuation.definition.parameters.begin.gsc" },
                "3": { 
                    "name": "variable.parameter.function.gsc",
                    "patterns": [
                        {
                            "include": "#function-parameter-defaults"
                        },
                        {
                            "include": "#expression"
                        },
                        {
                            "include": "#function-vararg"
                        },
                        {
                            "name": "keyword.operator.parameter-comma.gsc",
                            "match": ","
                        }
                    ]
                },
                "4": { "name": "punctuation.definition.parameters.end.gsc" }
            }
        },
        { "include": "#block-comment" },
        { "include": "#expression" },
        { "include": "#control" },
        {
            "name": "keyword.operator.gsc",
            "comment": "Reserved operators in GSC/CSC",
            "match": "(\\|\\||\\&\\&|\\||\\&|\\^|\\=\\=|\\=\\=\\=|\\!\\=|\\!\\=\\=|\\<|\\>|\\<\\=|\\>\\=|\\<\\<|\\>\\>|\\+|\\-|\\*|\\%|\\!|\\~|\\=|\\-\\>|\\+\\+|\\-\\-|\\|\\=|\\^\\=|\\&\\=|\\<\\<\\=|\\>\\>\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=)"
        },
        {
            "name": "comment.line.double-slash.gsc",
            "begin": "//",
            "end": "\n"
        },
        {
            "name": "comment.block.documentation.gsc",
            "begin": "/@",
            "end": "@/"
        },
        {
            "name": "meta.preprocessor.file-directives.gsc",
            "match": "(#(?:using|insert)) ([^ ]*)(;)",
            "captures": {
                "1": { "name": "keyword.control.directive.using.gsc" },
                "2": { "name": "string.quoted.other.blank.using.gsc" },
                "3": { "name": "keyword.control.directive.end.gsc" }
            }
        },
        {
            "name": "meta.preprocessor.namespace.gsc",
            "match": "(#(?:namespace)) ([^ ]*)(;)",
            "captures": {
                "1": { "name": "keyword.control.directive.using.gsc" },
                "2": { "name": "entity.name.namespace.gsc" },
                "3": { "name": "keyword.control.directive.end.gsc" }
            }
        },
        {
            "name": "meta.preprocessor.asset-directives.gsc",
            "match": "(#(?:using_animtree|precache)\\()(.*)(\\);)",
            "captures": {
                "1": { "name": "keyword.control.directive.asset.start.gsc" },
                "2": { 
                    "name": "keyword.control.directive.asset.parameters.gsc",
                    "patterns": [
                        {
                            "include": "#double-quote-string"
                        }
                    ]
                },
                "3": { "name": "keyword.control.directive.asset.end.gsc" }
            }
        },
        { "include": "#function-call" }
    ],
    "repository": {
        "block-comment": {
            "name": "comment.block.comment.gsc",
            "begin": "\\/\\*",
            "end": "\\*\\/"
        },
        "double-quote-string": {	
            "name": "string.quoted.double.gsc",
			"begin": "\"",
            "end": "\"",
			"beginCaptures": { "0": { "name": "punctuation.definition.string.begin.gsc" }},
            "endCaptures": { "0": { "name": "punctuation.definition.string.end.gsc" }},
            "patterns": [
                { "include": "#escape" }
            ]
		},
        "function-parameter-defaults": {
            "name": "meta.parameters.default.gsc",
            "match": "(([[:alnum:]]\\w*)(\\s*=)\\s*(\\S*))",
            "captures": {
                "3": {
                    "name": "keyword.operator.parameter-default.gsc"
                },
                "4": {
                    "patterns": [
                        { "include": "#expression" }
                    ]
                }
            }
        },
        "function-vararg": {
            "name": "keyword.operator.vararg.gsc",
            "match": "\\.\\.\\."
        },
        "language-reserved-variables": {
            "name": "variable.language.gsc",
            "match": "\\b(self|level|game|world|vararg)\\b"
        },
        "boolean-true": {
            "name": "constant.language.boolean.true.gsc",
            "match": "\\btrue\\b"
        },
        "boolean-false": {
            "name": "constant.language.boolean.false.gsc",
            "match": "\\bfalse\\b"
        },
        "undefined": {
            "name": "constant.language.undefined.gsc",
            "match": "\\bundefined\\b"
        },
        "expression-keywords": {
            "patterns": [
                { "include": "#undefined" },
                { "include": "#boolean-true" },
                { "include": "#boolean-false" },
                { "include": "#language-reserved-variables" }
            ]
        },
        "number": {	
            "name": "constant.numeric.gsc",
			"match": "\\b((0(x|X)[0-9a-fA-F]+)|(\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?))\\b"
		},
        "expression": {
            "patterns": [
                { "include": "#block-comment" },
                { "include": "#double-quote-string" },
                { "include": "#number" },
                { "include": "#expression-keywords" }
            ]
        },
        "control": {
            "name": "keyword.control.gsc",
            "comment": "Reserved control keywords in GSC/CSC",
            "match": "\\b(class|var|return|wait|thread|classes|anim|if|else|do|while|for|foreach|in|new|waittill|waittillmatch|waittillframeend|switch|case|default|break|continue|notify|endon|waitrealtime|profilestart|profilestop|isdefined)\\b"
        },
        "escape": {
            "name": "constant.character.escape",
            "match": "\\\\(r|n|t)"
        },
        "function-call": {	
            "name": "meta.function-call.gsc",
			"comment": "match function calls like: scene::play('example');",
			"match": "(?:((?:[[:alpha:]]|_)\\w+)(::))?((?:[[:alnum:]]|_)\\w+)\\s*(\\()(.*?)(\\))",
			"captures": {
                "1": { "name": "entity.name.scope-resolution.gsc" },
                "3": { 
                    "name": "entity.name.function.gsc",
                    "patterns": [
                        {
                            "include": "#control"
                        }
                    ]
                },
                "4": { "name": "punctuation.definition.parameters.begin.gsc" },
                "5": {
                    "patterns": [
                        {
                            "include": "#function-parameter-defaults"
                        },
                        {
                            "include": "#expression"
                        },
                        {
                            "name": "keyword.operator.parameter-comma.gsc",
                            "match": ","
                        }
                    ]
                },
                "6": { "name": "punctuation.definition.parameters.end.gsc" }
            },
            "patterns": [
                { "include": "#function-call" },
                { "include": "#block-comment"}
            ]
        }
    }
}